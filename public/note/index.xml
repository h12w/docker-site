<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on h12.me</title>
    <link>http://h12.me/note/</link>
    <description>Recent content in Notes on h12.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012-2015, Hǎiliàng Wáng; all rights reserved.</copyright>
    <lastBuildDate>Sun, 31 Jan 2016 20:31:06 +0800</lastBuildDate>
    <atom:link href="http://h12.me/note/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sending Email from Gmail using Golang</title>
      <link>http://h12.me/note/send-email-from-gmail/</link>
      <pubDate>Sun, 31 Jan 2016 20:31:06 +0800</pubDate>
      
      <guid>http://h12.me/note/send-email-from-gmail/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Turn on &lt;a href=&#34;http://accounts.google.com/SmsAuthConfig&#34;&gt;&amp;ldquo;2-Step Verification&amp;rdquo;&lt;/a&gt; so
that an &lt;a href=&#34;https://security.google.com/settings/security/apppasswords&#34;&gt;&amp;ldquo;App password&amp;rdquo;&lt;/a&gt; can be generated&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;go get gopkg.in/gomail.v2&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Send your Email like the example below:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;gopkg.in/gomail.v2&amp;quot;
)

func main() {
	m := gomail.NewMessage()
	m.SetHeader(&amp;quot;From&amp;quot;, &amp;quot;from_address@gmail.com&amp;quot;)
	m.SetAddressHeader(&amp;quot;To&amp;quot;, &amp;quot;to_adress@xxx&amp;quot;, &amp;quot;to_name&amp;quot;)
	m.SetAddressHeader(&amp;quot;Cc&amp;quot;, &amp;quot;cc_adress@xxx&amp;quot;, &amp;quot;cc_name&amp;quot;)
	m.SetHeader(&amp;quot;Subject&amp;quot;, &amp;quot;Hello! TEST!&amp;quot;)
	m.SetBody(&amp;quot;text/html&amp;quot;, &amp;quot;Hello! &amp;lt;b&amp;gt;TEST&amp;lt;/b&amp;gt;!&amp;quot;)

	d := gomail.NewPlainDialer(&amp;quot;smtp.gmail.com&amp;quot;, 587, &amp;quot;from_address@gmail.com&amp;quot;, &amp;quot;the App password&amp;quot;)

	if err := d.DialAndSend(m); err != nil {
		panic(err)
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SSH Resources in Go</title>
      <link>http://h12.me/note/go-ssh-resources/</link>
      <pubDate>Sun, 31 Jan 2016 14:49:01 +0800</pubDate>
      
      <guid>http://h12.me/note/go-ssh-resources/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;golang.org/x/crypto/ssh&lt;/li&gt;
&lt;li&gt;github.com/YuriyNasretdinov/GoSSHa&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.ralch.com/tutorial/golang-ssh-connection/&#34;&gt;SSH Client connection in Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kukuruku.co/hub/golang/ssh-commands-execution-on-hundreds-of-servers-via-go&#34;&gt;Using Go to Execute Commands on Hundreds of Servers with SSH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to Remove All Exited Containers &amp; Dangling Images for Docker?</title>
      <link>http://h12.me/note/remove_all_exited_docker_containers/</link>
      <pubDate>Mon, 03 Aug 2015 16:55:49 +0800</pubDate>
      
      <guid>http://h12.me/note/remove_all_exited_docker_containers/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker ps --quiet --filter=status=exited | xargs docker rm
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker images --no-trunc=true --filter=&amp;quot;dangling=true&amp;quot; --quiet=true | xargs docker rmi
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>A Comprehensive Note about Proxy Settings</title>
      <link>http://h12.me/note/proxy_notes/</link>
      <pubDate>Wed, 08 Jul 2015 07:58:34 +0000</pubDate>
      
      <guid>http://h12.me/note/proxy_notes/</guid>
      <description>

&lt;h2 id=&#34;git:c75aaf27ff78e6c7de91570c27fb0dfd&#34;&gt;Git&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cat ~/.gitconfig
[http]
	proxy = socks5://[host]:[port]
[https]
	proxy = socks5://[host]:[port]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;curl-homebrew:c75aaf27ff78e6c7de91570c27fb0dfd&#34;&gt;Curl (Homebrew)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cat ~/.curlrc
socks5 = &amp;quot;[host]:[port]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gae:c75aaf27ff78e6c7de91570c27fb0dfd&#34;&gt;GAE&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Set proxy&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export HTTP_PROXY http://[host]:[port]
export HTTPS_PROXY http://[host]:[port]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Delete cacerts.txt under GAE SDK installation to disable SSL verification (
make sure the proxy is safe before this step).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;appcfg.py . --email=[address] --passin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Phonetic Notations</title>
      <link>http://h12.me/note/phonetic_notations/</link>
      <pubDate>Tue, 30 Jun 2015 12:43:19 +0800</pubDate>
      
      <guid>http://h12.me/note/phonetic_notations/</guid>
      <description>

&lt;h2 id=&#34;google-dictionary:f89be48f7c6192a3d480a930835745a7&#34;&gt;Google Dictionary&lt;/h2&gt;

&lt;p&gt;Google dictionary uses a phonetic notation same as &lt;a href=&#34;http://en.wikipedia.org/wiki/Pronunciation_respelling_for_English&#34;&gt;NORD (New Oxford American Dictionary)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To figure out an unknown phonetic notation, the simple way is to look up a few words that you know how to pronounce:
church, hat, which, judge, game, thing, ship, thin, this, yes, pleasure
cat, pay, care, father, arm, let, see, here, city, my, pot, no, caught, war, force, boy, put, tour, boot, out, cut, word, item, rabbit, winner, pupil&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Notes on the Design of Go</title>
      <link>http://h12.me/note/go_design/</link>
      <pubDate>Mon, 29 Jun 2015 16:34:59 +0800</pubDate>
      
      <guid>http://h12.me/note/go_design/</guid>
      <description>

&lt;h3 id=&#34;refusing-new-features:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Refusing new features&lt;/h3&gt;

&lt;p&gt;Avoid &lt;a href=&#34;https://en.wikipedia.org/wiki/Leaky_abstraction&#34;&gt;leaky abstraction&lt;/a&gt; as much as possible. If an abstraction is not solid enough, you’d rather not use them at all. Go is designed like this, the features are carefully selected. If a feature is not solid enough, it will not be allowed to enter Go.&lt;/p&gt;

&lt;h3 id=&#34;no-implicit-string-concatenation:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;No implicit string concatenation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/S6a3bg65TBE/ikyNMzUSnXsJ&#34;&gt;Rob&lt;/a&gt;:
That used to be in the language but was dropped when the semicolon insertion rules went in. You need the + to be able to span lines, and if you can&amp;rsquo;t span lines operatorless concatenation is close to pointless.&lt;/p&gt;

&lt;h3 id=&#34;no-implicit-conversion:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;No Implicit conversion&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/S6a3bg65TBE/ikyNMzUSnXsJ&#34;&gt;Rob&lt;/a&gt;:
In any case the clarity of Go&amp;rsquo;s strictness is worth the occasional conversion. A huge class of bugs is simply gone, and a huge piece of tricky language in the specification never needed to be written.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/S6a3bg65TBE/KUNfj8L4H4IJ&#34;&gt;Russ&lt;/a&gt;:
Inserting automatic widening means giving up the &amp;ldquo;named types are not the same&amp;rdquo; rule, which makes it pretty much a non-starter.&lt;/p&gt;

&lt;h3 id=&#34;octal-literal:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Octal literal&lt;/h3&gt;

&lt;p&gt;Octal numeric system is rarely used, why does Go support them?&lt;/p&gt;

&lt;p&gt;From Wikipedia “Octal”: Octal representation of non-ASCII bytes may be particularly handy with UTF-8, where any start byte has octal value \3nn and any continuation byte has octal value \2nn.&lt;/p&gt;

&lt;h3 id=&#34;null-pointer-billion-dollar-mistake:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Null pointer (billion-dollar mistake)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/Vxpuc37S8tQ/2zGB1QgjmbAJ&#34;&gt;Jonathan&lt;/a&gt;:
in the eyes of the Go designers, who clearly don&amp;rsquo;t view it as a billion-dollar mistake, and in my eyes as well,
 having spent days debugging (or failing to debug) race conditions, but rarely more than an hour per null-pointer bug).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/SskXyc9D5Sk/-EKHAIFBRXEJ&#34;&gt;rog&lt;/a&gt;:
even in languages with no nil, such as Haskell, you can still get exceptions from using things that have an unexpected form. e.g. head [] that&amp;rsquo;s not too different from a nil pointer exception. so even if you go the non-nil route, you may still end up paying a good proportion of the &amp;ldquo;billion dollar&amp;rdquo; price.&lt;/p&gt;

&lt;h3 id=&#34;return-errors-rather-than-exceptions:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Return errors rather than exceptions&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blogs.msdn.com/b/oldnewthing/archive/2005/01/14/352949.aspx&#34;&gt;Raymond Chen&lt;/a&gt;:
It&amp;rsquo;s easy to write bad code, regardless of the error model. It&amp;rsquo;s hard to write good error-code-based code since you have to check every error code and think about what you should do when an error occurs. It&amp;rsquo;s really hard to write good exception-based code since you have to check every single line of code (indeed, every sub-expression) and think about what exceptions it might raise and how your code will react to it. (In C++ it&amp;rsquo;s not quite so bad because C++ exceptions are raised only at specific points during execution. In C#, exceptions can be raised at any time.)&lt;/p&gt;

&lt;h3 id=&#34;nil-channel-always-blocks-both-send-and-receive:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Nil channel always blocks (both send and receive)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/QltQ0nd9HvE/VvDhLO07Oq4J&#34;&gt;Rob&lt;/a&gt;:
It&amp;rsquo;s for consistency with select. The semantics of a nil channel are
the same regardless of how it is used. It&amp;rsquo;s useful that it blocks in a
select, so that&amp;rsquo;s what it does outside a select.&lt;/p&gt;

&lt;h3 id=&#34;reading-a-closed-channel-always-succeeds-with-zero-value:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Reading a closed channel always succeeds with zero value&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;the read cannot block because then it will not be distinguishable with nil channel.&lt;/li&gt;
&lt;li&gt;the read cannot panic because the writer close the channel to signal that it has been closed, not to panicking the reader.&lt;/li&gt;
&lt;li&gt;Then the read has to return, which value to return? Since the channel has been closed, so the only possible value is a fake one &amp;ndash; default zero value. an additional result of type bool reporting whether the communication succeeded.
e.g. v, ok := &amp;lt;-ch.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;writing-a-closed-channel-panics:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Writing a closed channel panics&lt;/h3&gt;

&lt;p&gt;The channel should only be closed by the writer(not reader), so if a writer close the channel and then write it again, it should be a programming bug and panic is the right behavior.&lt;/p&gt;

&lt;h3 id=&#34;full-qualified-package-name:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Full qualified package name&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/-tyo4o1uVTQ/FbDSkH9kq_oJ&#34;&gt;Rob&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Using . as an import name is part of the language and necessary in some cases to solve difficult naming issues but it&amp;rsquo;s not the intended style.  Package authors can depend on the fact that their code lives in its own name space.  If . becomes standard, then all packages in effect become a global name space and the style changes. Instead of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo.New
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the function must be called something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo.NewFoo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to avoid colliding with New from other packages.  And then what if Foo is itself a common name such as Buffer?  You rapidly end up in the Java space of very long names for everything.&lt;/p&gt;

&lt;p&gt;This convention we have, using the package names always, is deliberate.  Yes, sometimes it makes for more typing but we believe in the long run it means less typing.&lt;/p&gt;

&lt;h3 id=&#34;slice-type-is-a-builtin-type:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Slice type is a builtin type&lt;/h3&gt;

&lt;p&gt;To support variadic arguments.&lt;/p&gt;

&lt;h3 id=&#34;what-is-type-t-t:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;What is &lt;code&gt;type T []T&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Go cannot Do</title>
      <link>http://h12.me/note/what_go_cannot_do/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://h12.me/note/what_go_cannot_do/</guid>
      <description>

&lt;p&gt;This is a list about the corner cases that Go cannot do, and their work arounds.&lt;/p&gt;

&lt;h2 id=&#34;run-all-deferred-functions-of-other-goroutines-when-a-goroutine-panics:8b55f9ddc77541e5f8b431a4722abe5d&#34;&gt;Run all deferred functions of other goroutines when a goroutine panics&lt;/h2&gt;

&lt;p&gt;Uncaught panicking of one goroutine will exit the program without executing deferred functions of other goroutines.&lt;/p&gt;

&lt;p&gt;Workaround: this is the standard behavior, C++ with RAII also has the same problem. Persist your data in a way that crashing will not cause data integrity issue.&lt;/p&gt;

&lt;h2 id=&#34;assigning-to-fields-with-short-declaration-notation:8b55f9ddc77541e5f8b431a4722abe5d&#34;&gt;Assigning to fields with short declaration notation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Issue: &lt;a href=&#34;https://github.com/golang/go/issues/6842&#34;&gt;6842&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Status: Open &amp;amp; Unplanned&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it is useful:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if x.f, ok := f(); !ok {
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Workaround:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var ok bool
if x.f, ok = f(); !ok {
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;accessing-unexported-fields-with-reflect-value-interface-method:8b55f9ddc77541e5f8b431a4722abe5d&#34;&gt;Accessing unexported fields with reflect.Value.Interface method&lt;/h2&gt;

&lt;p&gt;When it is useful:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type S struct {
   val string
}

...

var s S

reflect.Value(s).Fields(0).Interface()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code will panics with message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reflect.Value.Interface: cannot return value obtained from unexported field or method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Workaround:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;v := reflect.Value(s).Fields(0)
if v.Kind() == reflect.String {
	s := v.String()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;slice-of-array-literal:8b55f9ddc77541e5f8b431a4722abe5d&#34;&gt;Slice of array literal&lt;/h2&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;[3]int{1, 2, 3}[:]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just use slice literal instead!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ebook Manipulation Tools</title>
      <link>http://h12.me/note/ebook_tools/</link>
      <pubDate>Thu, 04 Jun 2015 14:19:38 +0800</pubDate>
      
      <guid>http://h12.me/note/ebook_tools/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Ebook manager: &lt;a href=&#34;http://calibre-ebook.com/&#34;&gt;Calibre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kindle PDF optimizer: &lt;a href=&#34;http://www.willus.com/k2pdfopt/&#34;&gt;k2pdfopt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PDF Border Cropper &lt;a href=&#34;http://sourceforge.net/projects/briss/&#34;&gt;Briss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CHM File Extractor &lt;a href=&#34;https://github.com/dottedmag/archmage&#34;&gt;archmage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PDF editing &lt;a href=&#34;http://xournal.sourceforge.net&#34;&gt;Xournal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to &#34;go get&#34; Behind a Proxy</title>
      <link>http://h12.me/note/go_get_behind_proxy/</link>
      <pubDate>Wed, 06 May 2015 12:01:11 +0800</pubDate>
      
      <guid>http://h12.me/note/go_get_behind_proxy/</guid>
      <description>

&lt;h2 id=&#34;proxy-for-go-get:e490f2aac2393f2512d8fa1fe826c975&#34;&gt;Proxy for &amp;ldquo;go get&amp;rdquo;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;https_proxy=http://user:pass@proxy_host:port go get ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;proxy-for-git:e490f2aac2393f2512d8fa1fe826c975&#34;&gt;Proxy for Git&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[https]
	proxy = proxy_url
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;proxy-for-mercurial:e490f2aac2393f2512d8fa1fe826c975&#34;&gt;Proxy for Mercurial&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;$HOME/.hgrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[http_proxy]
host = host:port
user = ...
passwd = ...
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tips on SSH</title>
      <link>http://h12.me/note/tips_on_ssh/</link>
      <pubDate>Tue, 28 Apr 2015 10:59:02 +0800</pubDate>
      
      <guid>http://h12.me/note/tips_on_ssh/</guid>
      <description>

&lt;h2 id=&#34;generate-ssh-keys:1f1c4e8b5b8b665e71e6a80f55c5a955&#34;&gt;Generate SSH keys&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -C w@h12.me
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;authorize-public-key-at-remote-server:1f1c4e8b5b8b665e71e6a80f55c5a955&#34;&gt;Authorize public key at remote server&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-copy-id user@host
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Mac OSX, &lt;code&gt;ssh-copy-id&lt;/code&gt; should be installed first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install ssh-copy-id
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generate-pem:1f1c4e8b5b8b665e71e6a80f55c5a955&#34;&gt;Generate PEM&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -f ~/.ssh/id_rsa -e -m pem &amp;gt; ~/.ssh/id_rsa.pem
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to Generate XSD Schema from XML?</title>
      <link>http://h12.me/note/generate_xsd_from_xml/</link>
      <pubDate>Thu, 23 Apr 2015 15:41:12 +0800</pubDate>
      
      <guid>http://h12.me/note/generate_xsd_from_xml/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://archive.apache.org/dist/xmlbeans/binaries&#34;&gt;Apache XMLBeans&lt;/a&gt; is an old tool but still functioning. Download and uncompress the latest binary release, then run inst2xsd under bin folder (needs JDK).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;inst2xsd xxx.xml
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Go 1.4.1 Build Failure and Solution</title>
      <link>http://h12.me/note/go_build_failure/</link>
      <pubDate>Thu, 29 Jan 2015 03:55:08 +0000</pubDate>
      
      <guid>http://h12.me/note/go_build_failure/</guid>
      <description>&lt;p&gt;Today I tried to build Go 1.4.1 from source but it failed with this error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    go/src/liblink/anames9.c:6:29: fatal error: ../cmd/9l/9.out.h: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first I thought the building routine might have be changed so I opened and read
&lt;a href=&#34;http://golang.org/doc/install/source&#34;&gt;&lt;em&gt;Installing Go from Source&lt;/em&gt;&lt;/a&gt; again, carefully,
and found nothing special.&lt;/p&gt;

&lt;p&gt;Then I searched for the error source and it turned out that I should deleted
&lt;code&gt;anames*.c&lt;/code&gt;, manually. There is no document and no automatic cleaning script, and
you would have to figure it out yourself if no one ever mentioned it (&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/wQoQqXOnOTo/QbubO2UebpUJ&#34;&gt;source&lt;/a&gt;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to configure a custom domain name in GAE?</title>
      <link>http://h12.me/note/gae_custom_domain/</link>
      <pubDate>Mon, 19 Jan 2015 09:32:04 +0000</pubDate>
      
      <guid>http://h12.me/note/gae_custom_domain/</guid>
      <description>&lt;p&gt;Steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Visit &lt;a href=&#34;https://console.developers.google.com&#34;&gt;Developers Console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In your project: Compute -&amp;gt; App Engine -&amp;gt; Settings.&lt;/li&gt;
&lt;li&gt;On the tab labelled CUSTOM DOMAINS, you can verify your domain and assign it
and/or its subdomains to your GAE project.&lt;/li&gt;
&lt;li&gt;Add the DNS settings provided by Google into the DNS server of your domain
provider.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Only HTTP is supported, HTTPS is not.&lt;/li&gt;
&lt;li&gt;It will not work if you only modify the DNS record without actually assigning
the custom domain in the Developer Console.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>How to install a self-signed CA Certificate to Android 4.4</title>
      <link>http://h12.me/note/install_ca_android/</link>
      <pubDate>Sat, 17 Jan 2015 18:13:09 +0000</pubDate>
      
      <guid>http://h12.me/note/install_ca_android/</guid>
      <description>&lt;p&gt;See this blog &lt;a href=&#34;https://samhobbs.co.uk/2013/12/remove-network-may-be-monitored-by-an-unknown-third-party-in-android-4-4-kitkat&#34;&gt;&lt;em&gt;Remove &amp;ldquo;Network May Be Monitored by an Unknown Third Party&amp;rdquo; in Android 4.4 KitKat&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Shorter Domain Name</title>
      <link>http://h12.me/note/new_domain_h12/</link>
      <pubDate>Tue, 16 Dec 2014 09:43:40 +0000</pubDate>
      
      <guid>http://h12.me/note/new_domain_h12/</guid>
      <description>&lt;p&gt;This year, I decided not to renewal the previous domain name (hailiang.ws) last
year, but to register a shorter one. There are two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Both the site URL and the email address will be cleaner.&lt;/li&gt;
&lt;li&gt;A more friendly Go import path will be possible for my repositories on Github.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After comparing various choices on major domain providers, I chose &lt;code&gt;h12.me&lt;/code&gt; as
the new domain. It is the shortest but still meaningful domain that I can afford.
&lt;code&gt;H&lt;/code&gt; is the initial letter of my given name, &lt;code&gt;12&lt;/code&gt; is simply the number of letters
of my full name, and &lt;code&gt;.me&lt;/code&gt; is a top level domain quite suitable for a personal
website.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>App Engine on h12.me</title>
    <link>https://h12.me/tags/app-engine/</link>
    <description>Recent content in App Engine on h12.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012-2014, Hǎiliàng Wáng; all rights reserved.</copyright>
    <lastBuildDate>Sun, 06 Jul 2014 06:39:27 +0000</lastBuildDate>
    <atom:link href="https://h12.me/tags/app-engine/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Serving Static Pages on App Engine with Go</title>
      <link>https://h12.me/note/serve_static/</link>
      <pubDate>Sun, 06 Jul 2014 06:39:27 +0000</pubDate>
      
      <guid>https://h12.me/note/serve_static/</guid>
      <description>&lt;p&gt;It is straightforward to serve static pages with &lt;a href=&#34;http://golang.org/pkg/net/http/&#34;&gt;Go&lt;/a&gt;
or &lt;a href=&#34;https://developers.google.com/appengine/docs/go/config/appconfig&#34;&gt;config file&lt;/a&gt;
on App Engine, but how to serve static pages on App Engine with Go?&lt;/p&gt;

&lt;p&gt;I got the following error when I tried to customize the 404 page with Go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The solution turns out to be simple: do not do both.&lt;/p&gt;

&lt;p&gt;The file will not be accessible to Go if there is already a rule for it in
config.yaml. Remove the rule from config.yaml and the file will be available to
Go again (source:
&lt;a href=&#34;https://groups.google.com/d/msg/google-appengine-go/DmfDPUBkmrg/SvJ1dwjC0_EJ&#34;&gt;google-appengine-go&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Here is an exmaple to serve a custom 404 not found page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func serve404(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotFound)
	f, err := http.Dir(&amp;quot;public&amp;quot;).Open(&amp;quot;404.html&amp;quot;)
	if err != nil {
		serveError(w, r, err)
		return
	}
	defer f.Close()
	io.Copy(w, f)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mutex on Hai-Liang &#34;Hal&#34; Wang</title>
    <link>http://h12.io/tags/mutex/</link>
    <description>Recent content in Mutex on Hai-Liang &#34;Hal&#34; Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2012-2018, Hǎi-Liàng &#34;Hal&#34; Wáng; all rights reserved.</copyright>
    <lastBuildDate>Mon, 30 Nov 2020 17:45:31 +0000</lastBuildDate>
    
	<atom:link href="http://h12.io/tags/mutex/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Patterns: Context-aware Lock</title>
      <link>http://h12.io/article/go-patterns-context-aware-lock/</link>
      <pubDate>Mon, 30 Nov 2020 17:45:31 +0000</pubDate>
      
      <guid>http://h12.io/article/go-patterns-context-aware-lock/</guid>
      <description>We often use Mutex or RWMutex as locks in Go, but sometimes we need a lock that can be cancelled by a context during the lock attempt.
The pattern is simple - we use a channel with length 1:
lockChan := make(chan struct{}, 1) lockChan &amp;lt;- struct{}{} // lock &amp;lt;- lockChan // unlock  When multiple goroutines try to obtain the lock, only one of them is able to fill into the only slot, and the rest are blocked until the slot is empty again after a readout.</description>
    </item>
    
  </channel>
</rss>
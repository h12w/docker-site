<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Hai-Liang &#34;Hal&#34; Wang</title>
    <link>http://h12.io/tags/javascript/</link>
    <description>Recent content in Javascript on Hai-Liang &#34;Hal&#34; Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2012-2018, Hǎi-Liàng &#34;Hal&#34; Wáng; all rights reserved.</copyright>
    <lastBuildDate>Fri, 15 Feb 2019 14:08:01 +0000</lastBuildDate>
    
	<atom:link href="http://h12.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Learning Frontend</title>
      <link>http://h12.io/note/learn-frontend/</link>
      <pubDate>Fri, 15 Feb 2019 14:08:01 +0000</pubDate>
      
      <guid>http://h12.io/note/learn-frontend/</guid>
      <description> Vanilla JavaScript React Emotion  </description>
    </item>
    
    <item>
      <title>JavaScript Surprises to a Go Developer</title>
      <link>http://h12.io/note/js-surprises/</link>
      <pubDate>Tue, 12 Feb 2019 11:32:07 +0000</pubDate>
      
      <guid>http://h12.io/note/js-surprises/</guid>
      <description>The scope of var is wrong Never use var to declare variables, use let instead.
REF
== is conversion and comparison What you really need is ===, which is similar to comparing two interface{}.
=== is shallow {a:1}==={a:1} is false, while Go struct with string are compared by contents (but not for slice).
Also this affects map key comparison. So object key is not so useful in JS as struct key in Go.</description>
    </item>
    
  </channel>
</rss>
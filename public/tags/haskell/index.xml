<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on h12.me</title>
    <link>http://h12.me/tags/haskell/</link>
    <description>Recent content in Haskell on h12.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012-2016, Hǎiliàng Wáng; all rights reserved.</copyright>
    <lastBuildDate>Sat, 26 Jul 2014 08:12:39 +0000</lastBuildDate>
    <atom:link href="http://h12.me/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Learning Haskell the Hard Way</title>
      <link>http://h12.me/article/learn_haskell/</link>
      <pubDate>Sat, 26 Jul 2014 08:12:39 +0000</pubDate>
      
      <guid>http://h12.me/article/learn_haskell/</guid>
      <description>

&lt;p&gt;When I was reading the &lt;a href=&#34;http://www.haskell.org/haskellwiki/Learning_Haskell&#34;&gt;collection&lt;/a&gt; of learning resources on Haskell and tried to find a good start, I quickly realized that
none of the books or tutorials are suitable for me: the easier a tutorial claims
to be, the harder to really understand Haskell by reading it. What I need is a
terse documentation that introduces the syntax and semantics of Haskell
systematically and clearly, but unfortunately none was found.&lt;/p&gt;

&lt;p&gt;I know I have to try the hard way: reading the
&lt;a href=&#34;http://www.haskell.org/haskellwiki/Language_and_library_specification&#34;&gt;Haskell language specification&lt;/a&gt;
directly and absorb it myself. To make the process less dull and record my
progress, I will write down my learning notes here incrementally.&lt;/p&gt;

&lt;h2 id=&#34;overview:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;A Haskell program is organized with four levels: &lt;em&gt;modules&lt;/em&gt;, &lt;em&gt;declarations&lt;/em&gt;,
&lt;em&gt;expressions&lt;/em&gt; &amp;amp; &lt;em&gt;lexical structures&lt;/em&gt;, but the specification is organized in the
reverse order.&lt;/p&gt;

&lt;p&gt;Haskell has &lt;em&gt;ad hoc&lt;/em&gt; polymorphism (&lt;em&gt;overloading&lt;/em&gt;) and &lt;em&gt;parametric&lt;/em&gt; polymorphism
(Hindley-Milner type structure).&lt;/p&gt;

&lt;p&gt;Haskell has six namespaces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for value

&lt;ul&gt;
&lt;li&gt;variable&lt;/li&gt;
&lt;li&gt;constructor&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;for type entity

&lt;ul&gt;
&lt;li&gt;type variable&lt;/li&gt;
&lt;li&gt;type constructor&lt;/li&gt;
&lt;li&gt;type class&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same name can be reused without conflicts as long as they are in different
namespaces.&lt;/p&gt;

&lt;h2 id=&#34;lexical-structure:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Lexical Structure&lt;/h2&gt;

&lt;p&gt;A Haskell program is composed of lexemes (tokens) and whitespaces.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;program → { lexeme | whitespace } 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whitespace includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The complete set of whitespace in both ASCII &amp;amp; Unicode&lt;/li&gt;
&lt;li&gt;Two kinds of comments

&lt;ul&gt;
&lt;li&gt;inline comment starts with &lt;code&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;nested comment wrapped by &lt;code&gt;{- -}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A lexeme is one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;identifier

&lt;ul&gt;
&lt;li&gt;qvarid: (qualified) variable identifier&lt;/li&gt;
&lt;li&gt;qconid: (qualified) constructor identifier&lt;/li&gt;
&lt;li&gt;reservedid: reserved identifier&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;operator

&lt;ul&gt;
&lt;li&gt;qvarsym: (qualified) variable (symbolic) operator&lt;/li&gt;
&lt;li&gt;qconsym: (qualified) constructor (symbolic) operator&lt;/li&gt;
&lt;li&gt;reservedop: reserved operator&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;literal: integer, float, character or string literal&lt;/li&gt;
&lt;li&gt;special: one of special symbols &lt;code&gt;()[]{}`,;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A variable and a constructor is distinguished by the first character and put into
different namespaces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;identifier

&lt;ul&gt;
&lt;li&gt;variable: lower case (including underscore)&lt;/li&gt;
&lt;li&gt;constructor: upper case&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;operator

&lt;ul&gt;
&lt;li&gt;variable: non-colon&lt;/li&gt;
&lt;li&gt;constructor: colon &lt;code&gt;:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A variable or constructor can contain symbol &lt;code&gt;&#39;&lt;/code&gt;, so the common mathematical
term &amp;ldquo;x prime&amp;rdquo; can be represented as &lt;code&gt;x&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By using layout rule (indentation), symbols &lt;code&gt;{};&lt;/code&gt; can be omitted in sereral
grammer productions.&lt;/p&gt;

&lt;h2 id=&#34;expressions:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Expressions&lt;/h2&gt;

&lt;h3 id=&#34;parentheses:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Parentheses&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;(exp)&lt;/code&gt; is a &lt;em&gt;parenthesized expression&lt;/em&gt;, and is equivalent to &lt;code&gt;exp&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;function-operator-application:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Function &amp;amp; operator application&lt;/h3&gt;

&lt;p&gt;Function is prefixed and curried, so &lt;code&gt;f x y&lt;/code&gt; means &lt;code&gt;(f x) y&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fexp    → [fexp] aexp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All operators are infixed except prefix negation &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infixexp→ lexp qop infixexp
        | - infixexp    (prefix negation)
        | lexp
qop     → qvarop | qconop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An operator can be converted to prefix notation by parentheses. e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(+) x y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reversely, a function identifier (either variable or constructor) can be
converted to an infix operator by backquotes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x `op` y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-tuple:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;List &amp;amp; Tuple&lt;/h3&gt;

&lt;p&gt;List is constructed with &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1:2:3:[]   or   (:) 1 ((:) 2 ((:) 3 []))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Arithmetic sequence&lt;/em&gt; is another way to construct a list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1,3..6] == [1,3,5]
  [1..6] == [1,2,3,4,5,6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tuple is constructed with &lt;code&gt;(,...,)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1, 2, &amp;quot;a&amp;quot;)   or   (,,) 1 2 &amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;field-label:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Field label&lt;/h3&gt;

&lt;p&gt;A field label is used to give a name to a field in a datatype. It can be used to
construct, extract and update the field.&lt;/p&gt;

&lt;p&gt;A constructor with labeled fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aexp    → qcon { fbind1 , … , fbindn }  (n ≥ 0)
fbind   → qvar = exp 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pattern-matching:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Pattern matching&lt;/h3&gt;

&lt;p&gt;A pattern itself is not an expression, but it is an important part of sereral
expressions, including: &lt;em&gt;lambda abstractions&lt;/em&gt;, &lt;em&gt;function definitions&lt;/em&gt;,
&lt;em&gt;let expressions&lt;/em&gt;, &lt;em&gt;list comprehensions&lt;/em&gt;, &lt;em&gt;do expressions&lt;/em&gt; and &lt;em&gt;case expressions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pattern matching is used to deconstruct values according to their type
specification. It proceeds from left to right, and outside to inside. Attempting
to match a pattern can have one of three results:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fail&lt;/li&gt;
&lt;li&gt;Succeed: returning a binding for each variable in the pattern&lt;/li&gt;
&lt;li&gt;Diverge: i.e. return ⊥&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The syntax for patterns covers a subset of expressions.&lt;/p&gt;

&lt;p&gt;A pattern can match against infix expressions, but limited to infix constructors
(the operator must be &lt;code&gt;qconop&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pat     → lpat qconop pat (infix constructor)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A pattern can match against constructor functions (with or without field labels).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pat     → ...
        | lpat

lpat    → apat
        | gcon apat1 … apatk    (arity gcon  =  k, k ≥ 1) 

apat    → ...
        | gcon  (arity gcon  =  0)
        | qcon { fpat1 , … , fpatk }    (labeled pattern, k ≥ 0)

fpat    → qvar = pat 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A pattern can match against a variable, a literal, a parenthesized expression,
a tuple or a list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lpat    → var ...
        | - (integer | float)   (negative literal) 

apat    → ...
        | literal
        | ( pat )               (parenthesized pattern)
        | ( pat1 , … , patk )   (tuple pattern, k ≥ 2)
        | [ pat1 , … , patk ]   (list pattern, k ≥ 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The variables defined within the pattern can be binded, but how to name and bind
the whole pattern? This is exactly what an &lt;em&gt;as pattern&lt;/em&gt; does (&lt;code&gt;var&lt;/code&gt; before &lt;code&gt;@&lt;/code&gt;
is the name for the whole pattern).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apat    → var [ @ apat] (as pattern) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wildcard is used when you need a variable placeholder but do not want to bind
the value to a name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apat    → ...
        | _     (wildcard)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes you need a pattern that can never fail (only succeed or diverge), it
is called a irrefutable pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apat    → ...
        | ~ apat        (irrefutable pattern)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides &lt;code&gt;~apat&lt;/code&gt;, these patterns are also irrefutable: a variable, a wildcard,
&lt;code&gt;N apat&lt;/code&gt; where N is a constructor defined by newtype and apat is irrefutable,
&lt;code&gt;var@apat&lt;/code&gt; where apat is irrefutable. All other patterns are refutable.&lt;/p&gt;

&lt;h3 id=&#34;case-expression:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Case expression&lt;/h3&gt;

&lt;p&gt;Case expression is very important because all other pattern matching expressions
ultimately translate into case expressions.&lt;/p&gt;

&lt;p&gt;A case expression has one or more alternatives.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lexp    → case exp of { alts }
alts    → alt1 ; … ; altn       (n ≥ 1) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative is either a pattern or empty. The pattern either coresponds to
an expression (body) directly, or has one or more guarded patterns (note an
optional gdpat appears at the right side of itself). A guarded pattern starts
with &lt;code&gt;|&lt;/code&gt; and is composed of one or more guards.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alt     → pat -&amp;gt; exp [where decls]
        | pat  gdpat [where decls]
        | (empty alternative) 
gdpat   → guards -&amp;gt; exp [ gdpat ]
guards  → | guard1, …, guardn   (n ≥ 1)
decls   → { decl1 ; … ; decln } (n ≥ 0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that each alternative can optionally have a &lt;code&gt;where&lt;/code&gt; declaration. It is used
to bind extra variables to be used in the local scope.&lt;/p&gt;

&lt;p&gt;There are two types of guards: &lt;em&gt;pattern guard&lt;/em&gt; &amp;amp; &lt;em&gt;boolean guard&lt;/em&gt;, and local
declarations can also be introduced together with guards.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;guard   → pat &amp;lt;- infixexp     (pattern guard)
        | let decls           (local declaration)
        | infixexp            (boolean guard)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how a case expression works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The expression after &lt;code&gt;case&lt;/code&gt; is matched against each alternative till a match
is found.&lt;/li&gt;
&lt;li&gt;Then each guarded pattern in the matched alterantive is tested till one
passes. A guarded pattern passes if and only if all of its guards pass.&lt;/li&gt;
&lt;li&gt;If successful, the conresponding expression is returned, otherwise, the next
guarded pattern or alternative is tried sequentially.&lt;/li&gt;
&lt;li&gt;If no match can be found, the result is ⊥.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;lambda-expression:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Lambda expression&lt;/h3&gt;

&lt;p&gt;Lambda is used to construct a function without a name. Besides a variable, the
input can also be any pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lexp    → \ apat1 … apatn -&amp;gt; exp        (n ≥ 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(\ (x, y) -&amp;gt; x+y) (3, 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also note that lambda &lt;code&gt;-&amp;gt;&lt;/code&gt; associates to the right, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Integer -&amp;gt;  Integer -&amp;gt; Integer
    is equivalent to
Integer -&amp;gt; (Integer -&amp;gt; Integer)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;let-expression:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Let expression&lt;/h3&gt;

&lt;p&gt;A let expression introduces a nested, lexically-scoped, mutually-recursive list
of declarations. &lt;code&gt;exp&lt;/code&gt; after keyword &lt;code&gt;in&lt;/code&gt; is the value of a let expression.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lexp    → let decls in exp
decls   → { decl1 ; … ; decln } (n ≥ 0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let {} in 42
let {(x,y) = (1,2)} in x+y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-comprehension:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;List comprehension&lt;/h3&gt;

&lt;p&gt;A list comprehension constructs a list of elements represented by &lt;code&gt;exp&lt;/code&gt; qualified
by one or more qualifiers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aexp    → [ exp | qual1 , … , qualn ]   (n ≥ 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are three kinds of qualifiers.&lt;/p&gt;

&lt;p&gt;A generator is composed of a pattern (&lt;code&gt;pat&lt;/code&gt; with type &lt;code&gt;t&lt;/code&gt;) and a list (&lt;code&gt;e&lt;/code&gt; with
type &lt;code&gt;[t]&lt;/code&gt;). The pattern is matched against and binded to each element of the
list one by one, so the binded variables can be used to generate each element of
the result list. The generators are evaluated in a nested, depth-first order,
and a failed match is just skipped over.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;qual    → pat &amp;lt;- e      (generator)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A qualifier can also be a local declaration to bind auxiliary variables, or a
boolean guard to exclude some elements from the list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;qual    → ...
        | let decls     (local declaration)
        | exp           (boolean guard) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;do-expression:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Do expression&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Wait till monad is fully understood.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;type-signature:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Type signature&lt;/h3&gt;

&lt;p&gt;Haskell has type inference, but an expression can be optionally specified with a
&lt;em&gt;type signature&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exp     → infixexp :: [context =&amp;gt;] type
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;declarations:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Declarations&lt;/h2&gt;

&lt;p&gt;There are top declarations (&lt;code&gt;topdecl&lt;/code&gt;) that are only allowed at the top level of
a module, and nested declarations (&lt;code&gt;decl&lt;/code&gt;) that may be used either at the top
level or in nested scopes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;topdecl → ...
        | ...
        | decl 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;top-declarations:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Top declarations&lt;/h3&gt;

&lt;p&gt;A top declaration starts with one of the keywords: &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;newtype&lt;/code&gt;,
&lt;code&gt;class&lt;/code&gt;, &lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;foreign&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;data&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;newtype&lt;/code&gt; is for declaring new types. &lt;code&gt;class&lt;/code&gt; is for
declaring typeclasses and &lt;code&gt;instance&lt;/code&gt; is for declaring the membership between
types and typeclasses.&lt;/p&gt;

&lt;p&gt;They are explained later one by one.&lt;/p&gt;

&lt;h3 id=&#34;nested-declarations:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Nested declarations&lt;/h3&gt;

&lt;p&gt;In the last section, &lt;code&gt;decl&lt;/code&gt; appears in the let expression and where clause
without any explanations. Actually, they are nested declarations.&lt;/p&gt;

&lt;p&gt;There are five kinds of nested declarations: &lt;em&gt;type signature&lt;/em&gt;, &lt;em&gt;fixity&lt;/em&gt;,
&lt;em&gt;function binding&lt;/em&gt;, &lt;em&gt;pattern binding&lt;/em&gt; and &lt;em&gt;empty&lt;/em&gt; declartions.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;type signature&lt;/em&gt; simply specifies types for variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;decl    → gendecl
        | ...
gendecl → vars :: [context =&amp;gt;] type
vars    → var1 , …, varn        (n ≥ 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;em&gt;fixity&lt;/em&gt; declaration gives the fixity and binding precedence of one or more
operators.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gendecl → ...
        | fixity [integer] ops
fixity  → infixl | infixr | infix
ops     → op1 , … , opn         (n ≥ 1)
op      → varop | conop 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The right hand side (&lt;code&gt;rhs&lt;/code&gt;) of function and pattern bindings are the same.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;decl    → ...
        | (funlhs | pat) rhs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax of &lt;code&gt;rhs&lt;/code&gt; is almost the same as &lt;em&gt;case expression&lt;/em&gt;, except &lt;code&gt;-&amp;gt;&lt;/code&gt; is
replaced by &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rhs     → = exp [where decls]
        | gdrhs [where decls]
gdrhs   → guards = exp [gdrhs]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A function can be binded in multiple function binding declarations, as long as
they are contiguous and the number of patterns is the same. In each of the
declaration, the left hand side supports three alternative syntaxes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;funlhs  → var apat { apat }
        | pat varop pat
        | ( funlhs ) apat { apat }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plus x y z = x+y+z
x ‘plus‘ y = \ z -&amp;gt; x+y+z
(x ‘plus‘ y) z = x+y+z
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;type:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Type&lt;/h3&gt;

&lt;p&gt;Just as an &lt;em&gt;expression&lt;/em&gt; may contain variables and denotes a value, a
&lt;em&gt;type expression&lt;/em&gt; may contain &lt;em&gt;type variables&lt;/em&gt; and denotes a type value (but it
is evaluated at compile time, unlike an expression evaluated at run time).&lt;/p&gt;

&lt;p&gt;Type expressions are designed to have similar representations as their
corresponding expressions.&lt;/p&gt;

&lt;p&gt;Function type can be represented in infix or prefix notation.
Like function application, &lt;em&gt;type application&lt;/em&gt; (&lt;code&gt;btype&lt;/code&gt;) is also prefixed and
curried. &lt;code&gt;atype&lt;/code&gt; is the type expression excluding infix function type and
type application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type    → btype [-&amp;gt; type]       (function type)
btype   → [btype] atype         (type application)
atype   → gtycon
        | ...
gtycon  → ...
        | (-&amp;gt;)  (function constructor)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;em&gt;type variable&lt;/em&gt; is an identifier beginning with a lowercase letter.
A &lt;em&gt;parenthesized type&lt;/em&gt; &lt;code&gt;(t)&lt;/code&gt; is identical to the type &lt;code&gt;t&lt;/code&gt;.
A &lt;em&gt;type constructor&lt;/em&gt; (type template) as an identifier begins with an uppercase
letter.
Besides function type, the syntaxes for tuple and list are also special syntaxes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;atype   → gtycon
        | tyvar
        | ( type1 , … , typek ) (tuple type, k ≥ 2)
        | [ type ]              (list type)
        | ( type )              (parenthesised constructor)
gtycon  → qtycon
        | ()            (unit type)
        | []            (list constructor)
        | (-&amp;gt;)          (function constructor)
        | (,{,})        (tupling constructors) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;kind:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Kind&lt;/h3&gt;

&lt;p&gt;What is &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;* -&amp;gt; *&lt;/code&gt;&amp;hellip;? An ordinary type has kind &lt;code&gt;*&lt;/code&gt;. A type constructor
(template) that has one type argument has kind &lt;code&gt;* -&amp;gt; *&lt;/code&gt;, e.g. a list. So on and
so forth.&lt;/p&gt;

&lt;h3 id=&#34;context:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Context&lt;/h3&gt;

&lt;p&gt;The context (&lt;code&gt;context =&amp;gt; type&lt;/code&gt;) is used to indicate that type &lt;code&gt;tyvar&lt;/code&gt; belongs to
class &lt;code&gt;qtycls&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A context is composed of zero or more class assertions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context → class
        | ( class1 , … , classn )               (n ≥ 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a class assertion is either either a type variable, or the application of
type variable to one or more types.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class   → qtycls tyvar
        | qtycls ( tyvar atype1 … atypen )      (n ≥ 1)
qtycls  → [ modid . ] tycls
tycls   → conid
tyvar   → varid 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;algebraic-data-type:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Algebraic data type&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;algebraic data type&lt;/em&gt; is named so because it is composed of other types by
product and sum (algebraic operations). It introduces a new type constructor
(&lt;code&gt;simpletype&lt;/code&gt;) with zero or more constituent data constructors (&lt;code&gt;constrs&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;topdecl → ...
        | data [context =&amp;gt;] simpletype [= constrs] [deriving]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The type constructor begins with upper case letter and may have zero to more
type variables as parameters. The type constructor then can be used in curried
type application in a type expression.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;simpletype      → tycon tyvar1 … tyvark         (k ≥ 0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the right side of &lt;code&gt;=&lt;/code&gt;, sum (alternative) types are separated by &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;constrs → constr1 | … | constrn         (n ≥ 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each &lt;code&gt;constr&lt;/code&gt;, there are three alternative syntaxes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A data constructor followed by zero or more &lt;code&gt;atype&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An infix data constructor operator between two &lt;code&gt;btype&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A data constructor followed by field declarations.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;constr  → con [!] atype1 … [!] atypek   (arity con  =  k, k ≥ 0)
        | (btype | ! atype) conop (btype | ! atype) (infix conop)
        | con { fielddecl1 , … , fielddecln }       (n ≥ 0) 
con     → conid | ( consym )    (constructor) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;!&lt;/code&gt; is strictness flag to indicate that the corresponding constructor argument
is eagerly evaluated.&lt;/p&gt;

&lt;h3 id=&#34;type-synonym:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Type synonym&lt;/h3&gt;

&lt;p&gt;A type synonym is equivalent to its definition are completely interchangeable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;topdecl → type simpletype = type
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;newtype:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Newtype&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;newtype&lt;/em&gt; declaration introduces a distinct type whose representation is the
same as an existing type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;topdecl     → newtype [context =&amp;gt;] simpletype = newconstr [deriving]
newconstr   → con atype
            | con { var :: type }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Unlike type synonyms, &lt;code&gt;newtype&lt;/code&gt; may be used to define recursive types.&lt;/li&gt;
&lt;li&gt;New instances can be defined for a type defined by &lt;code&gt;newtype&lt;/code&gt; but may not be
defined for a type synonym.&lt;/li&gt;
&lt;li&gt;A type created by &lt;code&gt;newtype&lt;/code&gt; has an extra level of indirection compared to an
algebraic datatype, so the pattern matching rule is different.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ad-hoc-polymorphism:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Ad hoc polymorphism&lt;/h3&gt;

&lt;p&gt;Ad hoc polymorphism (overloading) is supported by &lt;em&gt;typeclasses&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A class declaration introduces a new class and the operations (methods) on it.&lt;/p&gt;

&lt;h2 id=&#34;modules:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Modules&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;To be continued&amp;hellip;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
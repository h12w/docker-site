<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on h12</title>
    <link>http://h12.io/tags/golang/</link>
    <description>Recent content in Golang on h12</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2012-2018, Wáng Hǎiliàng (Hal); all rights reserved.</copyright>
    <lastBuildDate>Wed, 28 Feb 2018 13:38:45 +0800</lastBuildDate>
    
	<atom:link href="http://h12.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pagination Done Right</title>
      <link>http://h12.io/note/pagination-done-right/</link>
      <pubDate>Wed, 28 Feb 2018 13:38:45 +0800</pubDate>
      
      <guid>http://h12.io/note/pagination-done-right/</guid>
      <description>Server side pagination is intrinsically not accurate, as long as the data is dynamic.
The data items could be inserted, deleted or changed on the server side while the user goes forward and backward among the pages.
However, there is an algorithm that can keep the pagination as stable as possible:
 encode the id and sorting fields of last value in a page as the continue-token return the continue-token along with each page the client must pass the continue-token to fetch the next page the next page starts with value &amp;gt; continue-token || (value == continue-token &amp;amp;&amp;amp; value.</description>
    </item>
    
    <item>
      <title>buid: Bipartite Unique Identifier</title>
      <link>http://h12.io/project/buid/</link>
      <pubDate>Wed, 15 Nov 2017 20:00:00 +0800</pubDate>
      
      <guid>http://h12.io/project/buid/</guid>
      <description>A BUID is a 128-bit unique ID composed of two 64-bit parts: shard and key.
It is not only a unique ID, but also contains the sharding information, so that the messages with the same BUID could be stored together within the same DB shard.
Also, when a message is stored in a shard, the shard part of the BUID can be trimmed off to save the space, and only the key part needs to be stored as the primary key.</description>
    </item>
    
    <item>
      <title>ua: User-Agent parser in Go</title>
      <link>http://h12.io/project/ua/</link>
      <pubDate>Mon, 18 Jul 2016 06:00:00 +0800</pubDate>
      
      <guid>http://h12.io/project/ua/</guid>
      <description>Design The UA detection algorithm is a pipeline containing 3 steps:
 Scan: scan products and its corresponding comments from a UA string. Parse: parse device info from products. Detect: detect device model by looking up in a database and get related info, e.g. screen resolution.  Scan The scanner scans the user agent string into products. Each product has its own name, version and comments. e.g.
For user agent string:</description>
    </item>
    
    <item>
      <title>Sending Email from Gmail using Go</title>
      <link>http://h12.io/note/send-email-from-gmail/</link>
      <pubDate>Sun, 31 Jan 2016 20:31:06 +0800</pubDate>
      
      <guid>http://h12.io/note/send-email-from-gmail/</guid>
      <description> Turn on &amp;ldquo;2-Step Verification&amp;rdquo; so that an &amp;ldquo;App password&amp;rdquo; can be generated
 go get gopkg.in/gomail.v2
 Send your Email like the example below:
  package main import ( &amp;quot;gopkg.in/gomail.v2&amp;quot; ) func main() { m := gomail.NewMessage() m.SetHeader(&amp;quot;From&amp;quot;, &amp;quot;from_address@gmail.com&amp;quot;) m.SetAddressHeader(&amp;quot;To&amp;quot;, &amp;quot;to_adress@xxx&amp;quot;, &amp;quot;to_name&amp;quot;) m.SetAddressHeader(&amp;quot;Cc&amp;quot;, &amp;quot;cc_adress@xxx&amp;quot;, &amp;quot;cc_name&amp;quot;) m.SetHeader(&amp;quot;Subject&amp;quot;, &amp;quot;Hello! TEST!&amp;quot;) m.SetBody(&amp;quot;text/html&amp;quot;, &amp;quot;Hello! &amp;lt;b&amp;gt;TEST&amp;lt;/b&amp;gt;!&amp;quot;) d := gomail.NewPlainDialer(&amp;quot;smtp.gmail.com&amp;quot;, 587, &amp;quot;from_address@gmail.com&amp;quot;, &amp;quot;the App password&amp;quot;) if err := d.DialAndSend(m); err != nil { panic(err) } }  </description>
    </item>
    
    <item>
      <title>SEJ: Message Queue Based on Segmented Journals</title>
      <link>http://h12.io/project/sej/</link>
      <pubDate>Sat, 14 Nov 2015 15:00:00 +0800</pubDate>
      
      <guid>http://h12.io/project/sej/</guid>
      <description>h12.io/sej provides composable components of distributed, persisted message queue and allows trading off between reliablilty, latency and throughput with minimal devops overhead.
Package Organization  h12.io/sej: writer, scanner and offset  shard: sharding hub: copying across machines cmd/sej: command line tool   SEJ Directory [root-dir]/ [sej-dir]/ jnl.lck jnl/ 0000000000000000.jnl 000000001f9e521e.jnl ...... ofs/ reader1.ofs reader1.lck reader2.ofs reader2.lck ......  Journal File format segment_file = { message } . message = offset timestamp type key value size .</description>
    </item>
    
    <item>
      <title>RealTest: real test environment for Go</title>
      <link>http://h12.io/project/realtest/</link>
      <pubDate>Sat, 14 Nov 2015 13:57:09 +0800</pubDate>
      
      <guid>http://h12.io/project/realtest/</guid>
      <description> h12.io/realtest provides real test environment for Go unit testing, based on Docker.
Includes:
 Queue  Kafka cluster (with zookeeper)  Database:  MySQL MongoDB  Cache  Redis  Configuration service  ZooKeeper   Author Hǎiliàng Wáng
Contributors  Tao Huang  </description>
    </item>
    
    <item>
      <title>JSON Schema parser &amp; code generator</title>
      <link>http://h12.io/project/json-schema/</link>
      <pubDate>Wed, 04 Nov 2015 19:00:00 +0800</pubDate>
      
      <guid>http://h12.io/project/json-schema/</guid>
      <description>json-schema generates Go struct from a JSON Schema specification.
Decimal types are supported for accurate currency calculation.</description>
    </item>
    
    <item>
      <title>Aliyun OSS Go SDK</title>
      <link>http://h12.io/project/aliyun-oss-go-sdk/</link>
      <pubDate>Thu, 22 Oct 2015 15:32:58 +0800</pubDate>
      
      <guid>http://h12.io/project/aliyun-oss-go-sdk/</guid>
      <description>Aliyun OSS (Object Storage Service) Go SDK is a client SDK to access Aliyun OSS API, implemented in the Go programming language.
Installation go get -u github.com/aliyun/aliyun-oss-go-sdk/oss go test -v -cover github.com/aliyun/aliyun-oss-go-sdk/oss  Highlights  Complete set of Aliyun OSS API Thouroughly tested  100% test coverage intuitive table driven tests full test suite completes within 2 seconds  Lint clean  golint go fmt goimports go vet race detector  Idiomatic &amp;amp; elegant  response is returned as a parsed object error is returned as a Go error named options for setting headers &amp;amp; parameters  Great extensibility  clean and orthogonal implementation users can easily extend the SDK when a new API method is supported  No third party dependencies  Documentation  Overview API Object Bucket Object Optional Headers and Parameters Multipart Upload Cross-Origin Resource Sharing (CORS) Object Lifecycle Management Extending the SDK  Differences with Python SDK  HTTP header User-Agent, e.</description>
    </item>
    
    <item>
      <title>kpax: a modular &amp; idiomatic Kafka client in Go</title>
      <link>http://h12.io/project/kpax/</link>
      <pubDate>Thu, 23 Jul 2015 13:36:25 +0800</pubDate>
      
      <guid>http://h12.io/project/kpax/</guid>
      <description>Install go get -u h12.io/kpax  Design The client is built on top of Kafka Wire Protocol (i.e. low-level API). The protocol related types &amp;amp; marshal/unmarshal functions are automatically generated by wipro from the HTML spec).
(-) means to be done.
Sub packages  model is an abstraction model for request, response, broker and cluster broker is a lazy, asynchronous and recoverable round tripper that talks to a single Kafka broker cluster is a metadata manager that talks to a Kafka cluster proto contains both low level API and a &amp;ldquo;middle&amp;rdquo; level facade producer: fault tolerant high-level producer (batching and partitioning strategy) consumer: fault tolerant high-level consumer (consumer group and offset commit) log: replaceable global logger cmd  kpax: command line tool to help with Kafka programming   Compatibility Compatible with Kafka Server 0.</description>
    </item>
    
    <item>
      <title>A Comprehensive Note about Proxy Settings</title>
      <link>http://h12.io/note/proxy-notes/</link>
      <pubDate>Wed, 08 Jul 2015 07:58:34 +0000</pubDate>
      
      <guid>http://h12.io/note/proxy-notes/</guid>
      <description> Git &amp;gt; cat ~/.gitconfig [http] proxy = socks5://[host]:[port] [https] proxy = socks5://[host]:[port]  Curl (Homebrew) &amp;gt; cat ~/.curlrc socks5 = &amp;quot;[host]:[port]&amp;quot;  Docker pull env HTTP_PROXY=http://xxx docker pull yyy  GAE  Set proxy
export HTTP_PROXY http://[host]:[port] export HTTPS_PROXY http://[host]:[port]  Delete cacerts.txt under GAE SDK installation to disable SSL verification ( make sure the proxy is safe before this step).
 Deploy.
appcfg.py . --email=[address] --passin   </description>
    </item>
    
    <item>
      <title>Notes on the Design of Go</title>
      <link>http://h12.io/note/go-design/</link>
      <pubDate>Mon, 29 Jun 2015 16:34:59 +0800</pubDate>
      
      <guid>http://h12.io/note/go-design/</guid>
      <description>Refusing new features Avoid leaky abstraction as much as possible. If an abstraction is not solid enough, you’d rather not use them at all. Go is designed like this, the features are carefully selected. If a feature is not solid enough, it will not be allowed to enter Go.
No implicit string concatenation Rob: That used to be in the language but was dropped when the semicolon insertion rules went in.</description>
    </item>
    
    <item>
      <title>What Go cannot Do</title>
      <link>http://h12.io/note/what-go-cannot-do/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://h12.io/note/what-go-cannot-do/</guid>
      <description>This is a list about the corner cases that Go cannot do, and their work arounds.
Run all deferred functions of other goroutines when a goroutine panics Uncaught panicking of one goroutine will exit the program without executing deferred functions of other goroutines.
Workaround: this is the standard behavior, C++ with RAII also has the same problem. Persist your data in a way that crashing will not cause data integrity issue.</description>
    </item>
    
    <item>
      <title>Schemata: database scheme extractor &amp; code generator in Go</title>
      <link>http://h12.io/project/schemata/</link>
      <pubDate>Tue, 19 May 2015 18:00:00 +0800</pubDate>
      
      <guid>http://h12.io/project/schemata/</guid>
      <description>Database scheme extractor &amp;amp; code generator in Go. Supported database:
 MySQL SQLite  </description>
    </item>
    
    <item>
      <title>How to &#34;go get&#34; Behind a Proxy</title>
      <link>http://h12.io/note/go-get-behind-proxy/</link>
      <pubDate>Wed, 06 May 2015 12:01:11 +0800</pubDate>
      
      <guid>http://h12.io/note/go-get-behind-proxy/</guid>
      <description> Proxy for &amp;ldquo;go get&amp;rdquo; https_proxy=http://user:pass@proxy_host:port go get ...  Proxy for Git In $HOME/.gitconfig:
[https] proxy = proxy_url  Proxy for Mercurial In $HOME/.hgrc:
[http_proxy] host = host:port user = ... passwd = ...  </description>
    </item>
    
    <item>
      <title>Go 1.4.1 Build Failure and Solution</title>
      <link>http://h12.io/note/go-build-failure/</link>
      <pubDate>Thu, 29 Jan 2015 03:55:08 +0000</pubDate>
      
      <guid>http://h12.io/note/go-build-failure/</guid>
      <description>Today I tried to build Go 1.4.1 from source but it failed with this error:
 go/src/liblink/anames9.c:6:29: fatal error: ../cmd/9l/9.out.h: No such file or directory  At first I thought the building routine might have be changed so I opened and read Installing Go from Source again, carefully, and found nothing special.
Then I searched for the error source and it turned out that I should deleted anames*.c, manually. There is no document and no automatic cleaning script, and you would have to figure it out yourself if no one ever mentioned it (source).</description>
    </item>
    
    <item>
      <title>A Shorter Domain Name</title>
      <link>http://h12.io/note/new-domain-h12/</link>
      <pubDate>Tue, 16 Dec 2014 09:43:40 +0000</pubDate>
      
      <guid>http://h12.io/note/new-domain-h12/</guid>
      <description>This year, I decided not to renewal the previous domain name (hailiang.ws) last year, but to register a shorter one. There are two reasons:
 Both the site URL and the email address will be cleaner. A more friendly Go import path will be possible for my repositories on Github.  After comparing various choices on major domain providers, I chose h12.io as the new domain. It is the shortest but still meaningful domain that I can afford.</description>
    </item>
    
    <item>
      <title>Gombi: Creating Your Own Parser is Easier than Regular Expressions</title>
      <link>http://h12.io/project/gombi/</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 +0800</pubDate>
      
      <guid>http://h12.io/project/gombi/</guid>
      <description>Gombi is a combinator-style scanner &amp;amp; parser library written in Go. It is practical, reasonably fast and extremely easy to use.
Quick start go get -u h12.io/gombi  Design Combinator parsers are straightforward to construct, modular and easily maintainable, compared to parser generators like Lex/Yacc.
 Internal DSL  no additional code generation and compilation.  Composable  a subset of the syntax tree is also a parser. a language can be easily embedded into another one.</description>
    </item>
    
    <item>
      <title>About 301 Moved Permanently</title>
      <link>http://h12.io/note/301-redirect/</link>
      <pubDate>Fri, 25 Jul 2014 03:39:05 +0000</pubDate>
      
      <guid>http://h12.io/note/301-redirect/</guid>
      <description>When building a website, there is one inevitable thing: 301 permanent redirection. The cases that have to involve 301 includes:
 Redirection from www subdomain to naked domain or vise versa. Redirection from slashed pretty URL to unslashed URL or vise versa.  301 is easy to implement with Go:
func redirect301(w http.ResponseWriter, url string) { w.Header().Set(&amp;quot;Location&amp;quot;, url) w.WriteHeader(http.StatusMovedPermanently) }  There is one more thing that needs attention: The root path of a domain always contains a slash (GET / in HTTP request), regardless the user enters the slash or not, so the root path needs no redirection.</description>
    </item>
    
    <item>
      <title>Serving Static Pages on App Engine with Go</title>
      <link>http://h12.io/note/serve-static/</link>
      <pubDate>Sun, 06 Jul 2014 06:39:27 +0000</pubDate>
      
      <guid>http://h12.io/note/serve-static/</guid>
      <description>It is straightforward to serve static pages with Go or config file on App Engine, but how to serve static pages on App Engine with Go?
I got the following error when I tried to customize the 404 page with Go:
No such file or directory  The solution turns out to be simple: do not do both.
The file will not be accessible to Go if there is already a rule for it in config.</description>
    </item>
    
    <item>
      <title>gosweep: A shell script to do various checks on Go code</title>
      <link>http://h12.io/project/gosweep/</link>
      <pubDate>Thu, 05 Jun 2014 23:00:00 +0800</pubDate>
      
      <guid>http://h12.io/project/gosweep/</guid>
      <description>This script performs the build, test and automatic checking of a Go package and its sub-packages using:
 gofmt goimports golint go vet ineffassign race detector test coverage on package and its sub-packages, /vendor directories excluded goveralls gocyclo misspell  Migrated from my Gist.
Dependencies To setup all the dependencies need to run the script do:
$ go get -v github.com/client9/misspell/cmd/misspell $ go get -v github.com/fzipp/gocyclo $ go get -v github.</description>
    </item>
    
    <item>
      <title>Getgo: a concurrent, simple and extensible web scraping framework</title>
      <link>http://h12.io/project/getgo/</link>
      <pubDate>Mon, 02 Jun 2014 01:21:00 +0000</pubDate>
      
      <guid>http://h12.io/project/getgo/</guid>
      <description>Getgo is a concurrent, simple and extensible web scraping framework written in Go.
Quick start Get Getgo go get -u github.com/h12w/getgo  Define a task This example is under the examples/goblog directory. To use Getgo to scrap structured data from a web page, just define the structured data as a Go struct (golangBlogEntry), and define a corresponding task (golangBlogIndexTask).
type golangBlogEntry struct { Title string URL string Tags *string } type golangBlogIndexTask struct { // Variables in task URL, e.</description>
    </item>
    
    <item>
      <title>GSpec: a productive Go test framework</title>
      <link>http://h12.io/project/gspec/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://h12.io/project/gspec/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://app.wercker.com/project/bykey/d5ed30f0d03d4a5210f65659ead13888&#34;&gt;&lt;img src=&#34;https://app.wercker.com/status/d5ed30f0d03d4a5210f65659ead13888/s&#34; alt=&#34;wercker status&#34; title=&#34;wercker status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://godoc.org/h12.io/gspec&#34;&gt;&lt;img src=&#34;https://godoc.org/h12.io/gspec?status.png&#34; alt=&#34;GoDoc&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>html-query: a fluent and functional approach to querying HTML DOM</title>
      <link>http://h12.io/project/html-query/</link>
      <pubDate>Mon, 20 Jan 2014 01:49:08 +0000</pubDate>
      
      <guid>http://h12.io/project/html-query/</guid>
      <description>html-query is a Go package that provides a fluent and functional interface for querying HTML DOM. It is based on go.net/html.
Examples  A simple example (under &amp;ldquo;examples&amp;rdquo; directory)
r := get(`http://blog.golang.org/index`) defer r.Close() root, err := query.Parse(r) checkError(err) root.Div(Id(&amp;quot;content&amp;quot;)).Children(Class(&amp;quot;blogtitle&amp;quot;)).For(func(item *query.Node) { href := item.Ahref().Href() date := item.Span(Class(&amp;quot;date&amp;quot;)).Text() tags := item.Span(Class(&amp;quot;tags&amp;quot;)).Text() // ...... })  Generator of html-query (under &amp;ldquo;gen&amp;rdquo; directory)
  A large part of html-query is automatically generated from HTML spec.</description>
    </item>
    
    <item>
      <title>Cwrap: wraps C libraries in Go</title>
      <link>http://h12.io/project/cwrap/</link>
      <pubDate>Wed, 01 Jan 2014 01:30:04 +0000</pubDate>
      
      <guid>http://h12.io/project/cwrap/</guid>
      <description>Cwrap is a Go wrapper generator for C libraries.
Features  No Cgo types exposed out of the wrapper package, and uses as less allocation/copy as possible. C name prefix mapped to Go packages, and a wrapper package can import another wrapper package. Follows Go naming conventions. C union. Use Go language features when possible:  string and bool. Multiple return values. Slice, slice of slice and slice of string.</description>
    </item>
    
    <item>
      <title>xsd: XML tagged struct generator for Go</title>
      <link>http://h12.io/project/xsd/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0800</pubDate>
      
      <guid>http://h12.io/project/xsd/</guid>
      <description>xsd is a Go package that generates tagged struct from XML Schema (xsd). When only the XML file is available, an xsd file can be automatically generated by a XML Schema learner, such as &amp;ldquo;github.com/kore/XML-Schema-learner&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>SOCKS: a SOCKS Proxy Package for Go</title>
      <link>http://h12.io/project/socks/</link>
      <pubDate>Wed, 01 Aug 2012 23:57:54 +0000</pubDate>
      
      <guid>http://h12.io/project/socks/</guid>
      <description>SOCKS is a SOCKS4, SOCKS4A and SOCKS5 proxy package for Go.
Quick Start Get the package go get -u &amp;quot;h12.io/socks&amp;quot;  Import the package import &amp;quot;h12.io/socks&amp;quot;  Create a SOCKS proxy dialing function dialSocksProxy := socks.DialSocksProxy(socks.SOCKS5, &amp;quot;127.0.0.1:1080&amp;quot;) tr := &amp;amp;http.Transport{Dial: dialSocksProxy} httpClient := &amp;amp;http.Client{Transport: tr}  Alternatives http://code.google.com/p/go/source/browse/?repo=net#hg%2Fproxy</description>
    </item>
    
  </channel>
</rss>
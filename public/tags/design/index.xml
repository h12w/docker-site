<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on h12.me</title>
    <link>https://h12.me/tags/design/</link>
    <description>Recent content in Design on h12.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012-2014, Hǎiliàng Wáng; all rights reserved.</copyright>
    <lastBuildDate>Mon, 29 Jun 2015 16:34:59 +0800</lastBuildDate>
    <atom:link href="https://h12.me/tags/design/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Notes on the Design of Go</title>
      <link>https://h12.me/note/go_design/</link>
      <pubDate>Mon, 29 Jun 2015 16:34:59 +0800</pubDate>
      
      <guid>https://h12.me/note/go_design/</guid>
      <description>

&lt;h3 id=&#34;refusing-new-features:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Refusing new features&lt;/h3&gt;

&lt;p&gt;Avoid &lt;a href=&#34;https://en.wikipedia.org/wiki/Leaky_abstraction&#34;&gt;leaky abstraction&lt;/a&gt; as much as possible. If an abstraction is not solid enough, you’d rather not use them at all. Go is designed like this, the features are carefully selected. If a feature is not solid enough, it will not be allowed to enter Go.&lt;/p&gt;

&lt;h3 id=&#34;no-implicit-string-concatenation:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;No implicit string concatenation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/S6a3bg65TBE/ikyNMzUSnXsJ&#34;&gt;Rob&lt;/a&gt;:
That used to be in the language but was dropped when the semicolon insertion rules went in. You need the + to be able to span lines, and if you can&amp;rsquo;t span lines operatorless concatenation is close to pointless.&lt;/p&gt;

&lt;h3 id=&#34;no-implicit-conversion:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;No Implicit conversion&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/S6a3bg65TBE/ikyNMzUSnXsJ&#34;&gt;Rob&lt;/a&gt;:
In any case the clarity of Go&amp;rsquo;s strictness is worth the occasional conversion. A huge class of bugs is simply gone, and a huge piece of tricky language in the specification never needed to be written.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/S6a3bg65TBE/KUNfj8L4H4IJ&#34;&gt;Russ&lt;/a&gt;:
Inserting automatic widening means giving up the &amp;ldquo;named types are not the same&amp;rdquo; rule, which makes it pretty much a non-starter.&lt;/p&gt;

&lt;h3 id=&#34;octal-literal:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Octal literal&lt;/h3&gt;

&lt;p&gt;Octal numeric system is rarely used, why does Go support them?&lt;/p&gt;

&lt;p&gt;From Wikipedia “Octal”: Octal representation of non-ASCII bytes may be particularly handy with UTF-8, where any start byte has octal value \3nn and any continuation byte has octal value \2nn.&lt;/p&gt;

&lt;h3 id=&#34;null-pointer-billion-dollar-mistake:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Null pointer (billion-dollar mistake)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/Vxpuc37S8tQ/2zGB1QgjmbAJ&#34;&gt;Jonathan&lt;/a&gt;:
in the eyes of the Go designers, who clearly don&amp;rsquo;t view it as a billion-dollar mistake, and in my eyes as well,
 having spent days debugging (or failing to debug) race conditions, but rarely more than an hour per null-pointer bug).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/SskXyc9D5Sk/-EKHAIFBRXEJ&#34;&gt;rog&lt;/a&gt;:
even in languages with no nil, such as Haskell, you can still get exceptions from using things that have an unexpected form. e.g. head [] that&amp;rsquo;s not too different from a nil pointer exception. so even if you go the non-nil route, you may still end up paying a good proportion of the &amp;ldquo;billion dollar&amp;rdquo; price.&lt;/p&gt;

&lt;h3 id=&#34;return-errors-rather-than-exceptions:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Return errors rather than exceptions&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blogs.msdn.com/b/oldnewthing/archive/2005/01/14/352949.aspx&#34;&gt;Raymond Chen&lt;/a&gt;:
It&amp;rsquo;s easy to write bad code, regardless of the error model. It&amp;rsquo;s hard to write good error-code-based code since you have to check every error code and think about what you should do when an error occurs. It&amp;rsquo;s really hard to write good exception-based code since you have to check every single line of code (indeed, every sub-expression) and think about what exceptions it might raise and how your code will react to it. (In C++ it&amp;rsquo;s not quite so bad because C++ exceptions are raised only at specific points during execution. In C#, exceptions can be raised at any time.)&lt;/p&gt;

&lt;h3 id=&#34;nil-channel-always-blocks-both-send-and-receive:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Nil channel always blocks (both send and receive)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/QltQ0nd9HvE/VvDhLO07Oq4J&#34;&gt;Rob&lt;/a&gt;:
It&amp;rsquo;s for consistency with select. The semantics of a nil channel are
the same regardless of how it is used. It&amp;rsquo;s useful that it blocks in a
select, so that&amp;rsquo;s what it does outside a select.&lt;/p&gt;

&lt;h3 id=&#34;reading-a-closed-channel-always-succeeds-with-zero-value:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Reading a closed channel always succeeds with zero value&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;the read cannot block because then it will not be distinguishable with nil channel.&lt;/li&gt;
&lt;li&gt;the read cannot panic because the writer close the channel to signal that it has been closed, not to panicking the reader.&lt;/li&gt;
&lt;li&gt;Then the read has to return, which value to return? Since the channel has been closed, so the only possible value is a fake one &amp;ndash; default zero value. an additional result of type bool reporting whether the communication succeeded.
e.g. v, ok := &amp;lt;-ch.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;writing-a-closed-channel-panics:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Writing a closed channel panics&lt;/h3&gt;

&lt;p&gt;The channel should only be closed by the writer(not reader), so if a writer close the channel and then write it again, it should be a programming bug and panic is the right behavior.&lt;/p&gt;

&lt;h3 id=&#34;full-qualified-package-name:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Full qualified package name&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/-tyo4o1uVTQ/FbDSkH9kq_oJ&#34;&gt;Rob&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Using . as an import name is part of the language and necessary in some cases to solve difficult naming issues but it&amp;rsquo;s not the intended style.  Package authors can depend on the fact that their code lives in its own name space.  If . becomes standard, then all packages in effect become a global name space and the style changes. Instead of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo.New
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the function must be called something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo.NewFoo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to avoid colliding with New from other packages.  And then what if Foo is itself a common name such as Buffer?  You rapidly end up in the Java space of very long names for everything.&lt;/p&gt;

&lt;p&gt;This convention we have, using the package names always, is deliberate.  Yes, sometimes it makes for more typing but we believe in the long run it means less typing.&lt;/p&gt;

&lt;h3 id=&#34;slice-type-is-a-builtin-type:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;Slice type is a builtin type&lt;/h3&gt;

&lt;p&gt;To support variadic arguments.&lt;/p&gt;

&lt;h3 id=&#34;what-is-type-t-t:7dee003ea8460b8c44d861f1c60e603b&#34;&gt;What is &lt;code&gt;type T []T&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A List of URLs about Web Design</title>
      <link>https://h12.me/note/web_design_site/</link>
      <pubDate>Thu, 10 Jul 2014 04:04:00 +0000</pubDate>
      
      <guid>https://h12.me/note/web_design_site/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webtypography.net/&#34;&gt;The Elements of Typographic Style Applied to the Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.smashingmagazine.com/&#34;&gt;Smashing Magazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://trentwalton.com/&#34;&gt;Trentwalton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.inkwell.ie/&#34;&gt;Inkwell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
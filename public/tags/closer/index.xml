<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Closer on Hai-Liang &#34;Hal&#34; Wang</title>
    <link>http://h12.io/tags/closer/</link>
    <description>Recent content in Closer on Hai-Liang &#34;Hal&#34; Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2012-2018, Hǎi-Liàng &#34;Hal&#34; Wáng; all rights reserved.</copyright>
    <lastBuildDate>Fri, 08 Jan 2021 10:48:26 +0000</lastBuildDate>
    
	<atom:link href="http://h12.io/tags/closer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Anti-pattern: Parent Closer</title>
      <link>http://h12.io/article/go-anti-patterns-parent-closer/</link>
      <pubDate>Fri, 08 Jan 2021 10:48:26 +0000</pubDate>
      
      <guid>http://h12.io/article/go-anti-patterns-parent-closer/</guid>
      <description>Imagine you need to wrap multiple objects which implements io.Closer, e.g. three clients to fetch and combine data from different endpoints.
type Parent struct { child1 Child1 child2 Child2 child3 Child3 }  Parent closer Let&amp;rsquo;s see how we can create and destroy a parent object.
func NewParent() (*Parent, error) { child1, err := NewChild1() if err != nil { return nil, err } child2, err := NewChild1() if err !</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Slides on h12.me</title>
    <link>http://h12.me/slide/</link>
    <description>Recent content in Slides on h12.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012-2016, Hǎiliàng Wáng; all rights reserved.</copyright>
    <lastBuildDate>Sun, 21 Aug 2016 13:00:00 +0000</lastBuildDate>
    <atom:link href="http://h12.me/slide/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>kpax</title>
      <link>http://h12.me/slide/kpax/</link>
      <pubDate>Sun, 21 Aug 2016 13:00:00 +0000</pubDate>
      
      <guid>http://h12.me/slide/kpax/</guid>
      <description>&lt;script&gt;
      var notesEnabled =  false ;
    &lt;/script&gt;
    &lt;script src=&#39;http://h12.me/static/slides.js&#39;&gt;&lt;/script&gt;

    

    &lt;section class=&#39;slides layout-widescreen&#39;&gt;

      &lt;article&gt;
        &lt;h1&gt;kpax&lt;/h1&gt;
        &lt;h3&gt;a modular &amp;amp; idiomatic Kafka client in Go&lt;/h3&gt;
        &lt;h3&gt;21 August 2016&lt;/h3&gt;
        
          &lt;div class=&#34;presenter&#34;&gt;
            
  
  &lt;p&gt;
    Wáng Hǎiliàng
  &lt;/p&gt;
  

  
  &lt;p&gt;
    Gopher at Appcoach
  &lt;/p&gt;
  

          &lt;/div&gt;
        
      &lt;/article&gt;

  
  
      &lt;article&gt;
      
        &lt;h3&gt;Introduction&lt;/h3&gt;
        
  
  &lt;p&gt;
    About Me
  &lt;/p&gt;
  

  &lt;ul&gt;
  
    &lt;li&gt;Pure Gopher since 2012&lt;/li&gt;
  
    &lt;li&gt;Backend Lead at Appcoach&lt;/li&gt;
  
    &lt;li&gt;https://h12.me&lt;/li&gt;
  
  &lt;/ul&gt;

  
  &lt;p&gt;
    About Appcoach
  &lt;/p&gt;
  

  &lt;ul&gt;
  
    &lt;li&gt;Global mobile advertising agency founded in 2014&lt;/li&gt;
  
    &lt;li&gt;Almost all backend services are written in Go&lt;/li&gt;
  
    &lt;li&gt;http://www.appcoachs.com&lt;/li&gt;
  
  &lt;/ul&gt;

      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h2&gt;Rationale&lt;/h2&gt;
      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h3&gt;Why Kafka?&lt;/h3&gt;
        
  
  &lt;p&gt;
    No resources to build our own messaging system :-)
  &lt;/p&gt;
  

  
  &lt;p&gt;
    Kafka is good enough:
  &lt;/p&gt;
  

  &lt;ul&gt;
  
    &lt;li&gt;A distributed, persisted, replicated messaging system&lt;/li&gt;
  
    &lt;li&gt;Key concepts: topic, partition, offset, consumer group, replication-factor, broker/cluster&lt;/li&gt;
  
  &lt;/ul&gt;

&lt;div class=&#34;image&#34;&gt;
  &lt;img src=&#34;http://h12.me/img/kpax/kafka.png&#34;&gt;
&lt;/div&gt;

      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h3&gt;Why yet another Go client for Kafka?&lt;/h3&gt;
        
  
  &lt;p&gt;
    Disappointed about the unnecessary complexity of
  &lt;/p&gt;
  

  &lt;ul&gt;
  
    &lt;li&gt;&lt;code&gt;sarama&lt;/code&gt;&lt;/li&gt;
  
    &lt;li&gt;&lt;code&gt;siesta&lt;/code&gt; &amp;amp; &lt;code&gt;go_kafka_client&lt;/code&gt;&lt;/li&gt;
  
  &lt;/ul&gt;

  
  &lt;p&gt;
    Gain better understanding about Kafka by writing a client and know how to troubleshoot when problems occur
  &lt;/p&gt;
  

      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h3&gt;Goal&lt;/h3&gt;
        
  &lt;ul&gt;
  
    &lt;li&gt;Simplicity: a thin layer above Kafka Wire Protocol, avoiding abuse of goroutines and channels&lt;/li&gt;
  
    &lt;li&gt;Modularity: separation of mechanism and policy, allowing the policy code to be easily replaced&lt;/li&gt;
  
    &lt;li&gt;Verifiability: unit test, online data tracing and command line tool&lt;/li&gt;
  
  &lt;/ul&gt;

      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h2&gt;Kafka Wire Protocol&lt;/h2&gt;
      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h3&gt;BNF&lt;/h3&gt;
        
  
  &lt;p&gt;
    From http://kafka.apache.org/protocol.html:
  &lt;/p&gt;
  

  
  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;MessageSet =&amp;gt; &amp;lt;OffsetMessage&amp;gt;
    OffsetMessage =&amp;gt; Offset SizedMessage
    Offset =&amp;gt; int64
    SizedMessage =&amp;gt; Size CrcMessage
    Size =&amp;gt; int32
    CrcMessage =&amp;gt; Crc Message
    Crc =&amp;gt; uint32

Message =&amp;gt; MagicByte Attributes Key Value
    MagicByte =&amp;gt; int8
    Attributes =&amp;gt; int8
    Key =&amp;gt; bytes
    Value =&amp;gt; bytes&lt;/pre&gt;&lt;/div&gt;
  

      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h3&gt;Code Generation&lt;/h3&gt;
        
  
  &lt;p&gt;
    By h12.me/wipro:
  &lt;/p&gt;
  

  
  &lt;div class=&#34;code&#34;&gt;&lt;pre&gt;func (t *MessageSet) Marshal(w *wipro.Writer) {
    offset := len(w.B)
    w.WriteInt32(0)
    start := len(w.B)
    for i := range *t {
        (*t)[i].Marshal(w)
    }
    w.SetInt32(offset, int32(len(w.B)-start))
}

func (t *Message) Marshal(w *wipro.Writer) {
    w.WriteInt8(t.MagicByte)
    w.WriteInt8(t.Attributes)
    w.WriteBytes(t.Key)
    w.WriteBytes(t.Value)
}&lt;/pre&gt;&lt;/div&gt;
  

      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h2&gt;Modularity&lt;/h2&gt;
      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt;
        
  &lt;ul&gt;
  
    &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions&lt;/li&gt;
  
    &lt;li&gt;Abstractions should not depend on details. Details should depend on abstractions&lt;/li&gt;
  
  &lt;/ul&gt;

      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h3&gt;kpax Command Line&lt;/h3&gt;
        
  &lt;ul&gt;
  
    &lt;li&gt;tail&lt;/li&gt;
  
    &lt;li&gt;consume&lt;/li&gt;
  
    &lt;li&gt;offset&lt;/li&gt;
  
    &lt;li&gt;rollback&lt;/li&gt;
  
  &lt;/ul&gt;

      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h3&gt;Test and verification&lt;/h3&gt;
        
  
  &lt;p&gt;
    Compatibility test
  &lt;/p&gt;
  

  &lt;ul&gt;
  
    &lt;li&gt;h12.me/realtest/kafka&lt;/li&gt;
  
  &lt;/ul&gt;

  
  &lt;p&gt;
    Data integrity
  &lt;/p&gt;
  

  &lt;ul&gt;
  
    &lt;li&gt;h12.me/stats&lt;/li&gt;
  
    &lt;li&gt;InfluxDB/Grafana&lt;/li&gt;
  
  &lt;/ul&gt;

      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h2&gt;Some Thought on Messaging System&lt;/h2&gt;
      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h3&gt;Why message queue is useful?&lt;/h3&gt;
        
  &lt;ul&gt;
  
    &lt;li&gt;Asynchronous?&lt;/li&gt;
  
  &lt;/ul&gt;

      
      &lt;/article&gt;
  
  
  
      &lt;article&gt;
      
        &lt;h3&gt;How to achieve reliable persistence?&lt;/h3&gt;
        
  
  &lt;p&gt;
    Crash consistency is hard but possible at a huge performance cost (fsync)
  &lt;/p&gt;
  

  
  &lt;p&gt;
    Data safty must rely on distributed solution (Raft/Paxos)
  &lt;/p&gt;
  

  
  &lt;p&gt;
    Perhaps we should just give up manual fsync and rely on:
  &lt;/p&gt;
  

  &lt;ul&gt;
  
    &lt;li&gt;OS background flush&lt;/li&gt;
  
    &lt;li&gt;corruption detection &amp;amp; correction at startup&lt;/li&gt;
  
    &lt;li&gt;replication&lt;/li&gt;
  
  &lt;/ul&gt;

      
      &lt;/article&gt;
  
  

      &lt;article&gt;
        &lt;h3&gt;Thank you&lt;/h3&gt;
        
          &lt;div class=&#34;presenter&#34;&gt;
            
  
  &lt;p&gt;
    Wáng Hǎiliàng
  &lt;/p&gt;
  

  
  &lt;p&gt;
    Gopher at Appcoach
  &lt;/p&gt;
  
&lt;p class=&#34;link&#34;&gt;&lt;a href=&#34;mailto:w@h12.me&#34; target=&#34;_blank&#34;&gt;w@h12.me&lt;/a&gt;&lt;/p&gt;
          &lt;/div&gt;
        
      &lt;/article&gt;

    &lt;/section&gt;

    

</description>
    </item>
    
  </channel>
</rss>
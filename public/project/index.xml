<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on h12.me</title>
    <link>http://h12.me/project/</link>
    <description>Recent content in Projects on h12.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012-2018, Hǎiliàng Wáng; all rights reserved.</copyright>
    <lastBuildDate>Sat, 14 Nov 2015 13:57:09 +0800</lastBuildDate>
    
	<atom:link href="http://h12.me/project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RealTest: real test environment for Go</title>
      <link>http://h12.me/project/realtest/</link>
      <pubDate>Sat, 14 Nov 2015 13:57:09 +0800</pubDate>
      
      <guid>http://h12.me/project/realtest/</guid>
      <description> h12.me/realtest provides real test environment for Go unit testing, based on Docker.
Includes:
 Queue  Kafka cluster (with zookeeper)  Database:  MySQL MongoDB  Cache  Redis  Configuration service  ZooKeeper   Author Hǎiliàng Wáng
Contributors  Tao Huang  </description>
    </item>
    
    <item>
      <title>Aliyun OSS Go SDK</title>
      <link>http://h12.me/project/aliyun-oss-go-sdk/</link>
      <pubDate>Thu, 22 Oct 2015 15:32:58 +0800</pubDate>
      
      <guid>http://h12.me/project/aliyun-oss-go-sdk/</guid>
      <description>Aliyun OSS (Object Storage Service) Go SDK is a client SDK to access Aliyun OSS API, implemented in the Go programming language.
Installation go get -u github.com/aliyun/aliyun-oss-go-sdk/oss go test -v -cover github.com/aliyun/aliyun-oss-go-sdk/oss  Highlights  Complete set of Aliyun OSS API Thouroughly tested  100% test coverage intuitive table driven tests full test suite completes within 2 seconds  Lint clean  golint go fmt goimports go vet race detector  Idiomatic &amp;amp; elegant  response is returned as a parsed object error is returned as a Go error named options for setting headers &amp;amp; parameters  Great extensibility  clean and orthogonal implementation users can easily extend the SDK when a new API method is supported  No third party dependencies  Documentation  Overview API Object Bucket Object Optional Headers and Parameters Multipart Upload Cross-Origin Resource Sharing (CORS) Object Lifecycle Management Extending the SDK  Differences with Python SDK  HTTP header User-Agent, e.</description>
    </item>
    
    <item>
      <title>kpax: a modular &amp; idiomatic Kafka client in Go</title>
      <link>http://h12.me/project/kpax/</link>
      <pubDate>Thu, 23 Jul 2015 13:36:25 +0800</pubDate>
      
      <guid>http://h12.me/project/kpax/</guid>
      <description>Install go get -u h12.me/kpax  Design The client is built on top of Kafka Wire Protocol (i.e. low-level API). The protocol related types &amp;amp; marshal/unmarshal functions are automatically generated by wipro from the HTML spec).
(-) means to be done.
Sub packages  model is an abstraction model for request, response, broker and cluster broker is a lazy, asynchronous and recoverable round tripper that talks to a single Kafka broker cluster is a metadata manager that talks to a Kafka cluster proto contains both low level API and a &amp;ldquo;middle&amp;rdquo; level facade producer: fault tolerant high-level producer (batching and partitioning strategy) consumer: fault tolerant high-level consumer (consumer group and offset commit) log: replaceable global logger cmd  kpax: command line tool to help with Kafka programming   Compatibility Compatible with Kafka Server 0.</description>
    </item>
    
    <item>
      <title>Getgo: a concurrent, simple and extensible web scraping framework</title>
      <link>http://h12.me/project/getgo/</link>
      <pubDate>Mon, 02 Jun 2014 01:21:00 +0000</pubDate>
      
      <guid>http://h12.me/project/getgo/</guid>
      <description>Getgo is a concurrent, simple and extensible web scraping framework written in Go.
Quick start Get Getgo go get -u github.com/h12w/getgo  Define a task This example is under the examples/goblog directory. To use Getgo to scrap structured data from a web page, just define the structured data as a Go struct (golangBlogEntry), and define a corresponding task (golangBlogIndexTask).
type golangBlogEntry struct { Title string URL string Tags *string } type golangBlogIndexTask struct { // Variables in task URL, e.</description>
    </item>
    
    <item>
      <title>GSpec: a productive Go test framework</title>
      <link>http://h12.me/project/gspec/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://h12.me/project/gspec/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://app.wercker.com/project/bykey/d5ed30f0d03d4a5210f65659ead13888&#34;&gt;&lt;img src=&#34;https://app.wercker.com/status/d5ed30f0d03d4a5210f65659ead13888/s&#34; alt=&#34;wercker status&#34; title=&#34;wercker status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://godoc.org/h12.me/gspec&#34;&gt;&lt;img src=&#34;https://godoc.org/h12.me/gspec?status.png&#34; alt=&#34;GoDoc&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>html-query: a fluent and functional approach to querying HTML DOM</title>
      <link>http://h12.me/project/html-query/</link>
      <pubDate>Mon, 20 Jan 2014 01:49:08 +0000</pubDate>
      
      <guid>http://h12.me/project/html-query/</guid>
      <description>html-query is a Go package that provides a fluent and functional interface for querying HTML DOM. It is based on go.net/html.
Examples  A simple example (under &amp;ldquo;examples&amp;rdquo; directory)
r := get(`http://blog.golang.org/index`) defer r.Close() root, err := query.Parse(r) checkError(err) root.Div(Id(&amp;quot;content&amp;quot;)).Children(Class(&amp;quot;blogtitle&amp;quot;)).For(func(item *query.Node) { href := item.Ahref().Href() date := item.Span(Class(&amp;quot;date&amp;quot;)).Text() tags := item.Span(Class(&amp;quot;tags&amp;quot;)).Text() // ...... })  Generator of html-query (under &amp;ldquo;gen&amp;rdquo; directory)
  A large part of html-query is automatically generated from HTML spec.</description>
    </item>
    
    <item>
      <title>Cwrap: wraps C libraries in Go</title>
      <link>http://h12.me/project/cwrap/</link>
      <pubDate>Wed, 01 Jan 2014 01:30:04 +0000</pubDate>
      
      <guid>http://h12.me/project/cwrap/</guid>
      <description>Cwrap is a Go wrapper generator for C libraries.
Features  No Cgo types exposed out of the wrapper package, and uses as less allocation/copy as possible. C name prefix mapped to Go packages, and a wrapper package can import another wrapper package. Follows Go naming conventions. C union. Use Go language features when possible:  string and bool. Multiple return values. Slice, slice of slice and slice of string.</description>
    </item>
    
    <item>
      <title>SOCKS: a SOCKS Proxy Package for Go</title>
      <link>http://h12.me/project/socks/</link>
      <pubDate>Wed, 01 Aug 2012 23:57:54 +0000</pubDate>
      
      <guid>http://h12.me/project/socks/</guid>
      <description>SOCKS is a SOCKS4, SOCKS4A and SOCKS5 proxy package for Go.
Quick Start Get the package go get -u &amp;quot;h12.me/socks&amp;quot;  Import the package import &amp;quot;h12.me/socks&amp;quot;  Create a SOCKS proxy dialing function dialSocksProxy := socks.DialSocksProxy(socks.SOCKS5, &amp;quot;127.0.0.1:1080&amp;quot;) tr := &amp;amp;http.Transport{Dial: dialSocksProxy} httpClient := &amp;amp;http.Client{Transport: tr}  Alternatives http://code.google.com/p/go/source/browse/?repo=net#hg%2Fproxy</description>
    </item>
    
  </channel>
</rss>
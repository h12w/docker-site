<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on h12.me</title>
    <link>http://h12.me/article/</link>
    <description>Recent content in Articles on h12.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012-2016, Hǎiliàng Wáng; all rights reserved.</copyright>
    <lastBuildDate>Wed, 18 Feb 2015 17:23:24 +0000</lastBuildDate>
    <atom:link href="http://h12.me/article/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Developer&#39;s Guide to Password Management</title>
      <link>http://h12.me/article/password_management/</link>
      <pubDate>Wed, 18 Feb 2015 17:23:24 +0000</pubDate>
      
      <guid>http://h12.me/article/password_management/</guid>
      <description>

&lt;p&gt;This article is intended to be a comprehensive recipe to password management,
assuming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You are a developer&lt;/li&gt;
&lt;li&gt;You have to manage dozens of passwords, ssh key pairs and possibly some secret
documents&lt;/li&gt;
&lt;li&gt;You want strong security on each of them&lt;/li&gt;
&lt;li&gt;You do not want to forget any of them but do not either want to spend too much time memorizing them&lt;/li&gt;
&lt;li&gt;You want to access your passwords from both your computers and mobile devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The proposed solution includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An unbreakable encryption standard (&lt;a href=&#34;http://en.wikipedia.org/wiki/Pretty_Good_Privacy&#34;&gt;OpenPGP&lt;/a&gt;)
and its open source implementation (&lt;a href=&#34;https://gnupg.org&#34;&gt;GnuPG&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;An open source password manager built on top of it (&lt;a href=&#34;http://www.passwordstore.org&#34;&gt;pass&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Memorizing one strong master pass phrase&lt;/li&gt;
&lt;li&gt;A backup plan: do not put all your eggs in one basket&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install-prerequisites:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Install Prerequisites&lt;/h2&gt;

&lt;p&gt;On Linux:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gnupg.org&#34;&gt;GnuPG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.passwordstore.org&#34;&gt;pass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Ubuntu)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install gnupg
sudo apt-get install pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Android:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openkeychain.org&#34;&gt;OpenKeyChain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zeapo/Android-Password-Store&#34;&gt;Password Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On iOS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rephorm/pass-ios&#34;&gt;Pass for iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;preparing-pgp-keys:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Preparing PGP Keys&lt;/h2&gt;

&lt;p&gt;If you are already a PGP user, skip this step, otherwise, you are going to generate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A master keypair (public/private keys)&lt;/li&gt;
&lt;li&gt;A sub keypair for password encryption/decryption&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gpg --gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will generate a master keypair associated with your true identity (
you may later want to use the PGP key pair for encrypted, digitally signed email).&lt;/p&gt;

&lt;p&gt;Choose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kind: RSA and RSA&lt;/li&gt;
&lt;li&gt;Bits: 4096&lt;/li&gt;
&lt;li&gt;Expire: key does not expire&lt;/li&gt;
&lt;li&gt;Real name: &amp;lt;real-name&amp;gt;&lt;/li&gt;
&lt;li&gt;Email address: &amp;lt;email-address&amp;gt;&lt;/li&gt;
&lt;li&gt;Comment: &amp;lt;comment&amp;gt;&lt;/li&gt;
&lt;li&gt;Pass phrase: &amp;lt;master-pass-phrase&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make the process faster, you shouse increase the system randomness. Run in
another terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rngd -f -r /dev/urandom
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When finished, a master key pair and an associated sub key pair will be created.
To see a list of your keys, type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gpg --list-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pub   4096R/&amp;lt;master-key-id&amp;gt; &amp;lt;date&amp;gt;
uid                  &amp;lt;real-name&amp;gt; &amp;lt;&amp;lt;email-address&amp;gt;&amp;gt;
sub   4096R/&amp;lt;sub-key-id&amp;gt; &amp;lt;date&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;sub-key-id&amp;gt;&lt;/code&gt; is the name of the key to encrypt/decrypt your stored passwords.&lt;/p&gt;

&lt;p&gt;Optionally, you can strengthen it by changing the encryption preferences.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --edit-key &amp;lt;email-address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed 
save
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;intialize-a-pass-store:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Intialize a Pass Store&lt;/h2&gt;

&lt;p&gt;A password store is simply a directory including encrypted files, and each of them
contains a password (the first line) and extra information (rest of the file).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd &amp;lt;pass-store&amp;gt;
pass init &amp;lt;sub-key-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;password-management-tips:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Password Management Tips&lt;/h2&gt;

&lt;h3 id=&#34;replace-existing-passwords-with-strong-ones:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Replace Existing Passwords with Strong Ones&lt;/h3&gt;

&lt;p&gt;Generate a random password (15 characters):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pass generate &amp;lt;account-name&amp;gt; 15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An encrypted file &lt;account-name&gt;.gpg is created. In decrypted form, the first
line is the generated password.&lt;/p&gt;

&lt;p&gt;To add extra information like user name or URL for the service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pass edit &amp;lt;account-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can update the password online accordingly.&lt;/p&gt;

&lt;h3 id=&#34;put-a-password-into-clipboard-for-45-seconds:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Put a password into Clipboard for 45 seconds&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;pass -c &amp;lt;account-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;avoid-typing-master-passwords-repeatedly:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Avoid typing master passwords repeatedly&lt;/h3&gt;

&lt;p&gt;Add configuration file &lt;code&gt;$HOME/.gnupg/gpg-agent.conf&lt;/code&gt; and remember the master
password for 3600 seconds:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pinentry-program /usr/bin/pinentry-gtk-2
default-cache-ttl 3600
max-cache-ttl 3600
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;store-ssh-keys:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Store SSH keys&lt;/h3&gt;

&lt;p&gt;Store SSH public key as the password in the pass store, and encrypt the private
key in the rest of the file.&lt;/p&gt;

&lt;p&gt;To change a Git remote from HTTPS to SSH:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote set-url origin git@&amp;lt;domain-name&amp;gt;:&amp;lt;repo-path&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;backup-plan:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Backup Plan&lt;/h2&gt;

&lt;p&gt;Prepare for the following extreme case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both your laptop and cell phone containing the pass store and PGP keys are
damaged or stolen.&lt;/li&gt;
&lt;li&gt;But you can still remember the master pass phrase.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;use-a-remote-git-repository-to-backup-the-password-store:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Use a remote Git repository to backup the password store&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cd &amp;lt;pass-store&amp;gt;
pass git init
pass git remote add origin &amp;lt;remote-git-url&amp;gt;
pass git push
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;backup-pgp-keys:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Backup PGP keys&lt;/h3&gt;

&lt;p&gt;Export all the key pairs (including both master and sub keys):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --export-secret-keys --armor &amp;lt;email-address&amp;gt;  &amp;gt;  &amp;lt;private-key-file&amp;gt;
gpg --export             --armor &amp;lt;email-address&amp;gt;  &amp;gt;  &amp;lt;public-key-file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep the files in a &lt;a href=&#34;https://www.google.com/search?q=PGP+key+backup&#34;&gt;safe, secret place&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;To restore the keys from backup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --import &amp;lt;private-key-file&amp;gt; &amp;lt;public-key-file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hide-pgp-master-private-key:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Hide PGP Master Private Key&lt;/h2&gt;

&lt;p&gt;AFTER the full backup of your PGP keys, you can choose to delete the master
private key on the device with the pass store, because only the sub key pair is
needed for encryption/decryption. The deletion will not protect your pass store,
but it will protect your identity associated with the master key.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gpg --export-secret-subkeys &amp;lt;email-address&amp;gt;   &amp;gt;   subkeys
gpg --delete-secret-key     &amp;lt;email-address&amp;gt;
gpg   --import subkeys
shred --remove subkeys
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;security-limitation:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;Security Limitation&lt;/h2&gt;

&lt;p&gt;PGP itself is secure and robust, but it all depends on how well you can preserve
and protect your PGP key pair and master pass phrase.&lt;/p&gt;

&lt;h2 id=&#34;references:05f84c8567f6e5f08117e66d318cc61a&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://alexcabal.com/creating-the-perfect-gpg-keypair&#34;&gt;Creating the Perfect GPG Keypair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.passwordstore.org&#34;&gt;Pass: the standard unix password manager&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>A Brief Note on Scientific Web Surfing</title>
      <link>http://h12.me/article/scientific_web_surfing/</link>
      <pubDate>Sat, 14 Feb 2015 09:30:55 +0000</pubDate>
      
      <guid>http://h12.me/article/scientific_web_surfing/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Knowledge is power. Information is liberating. &amp;mdash; by Kofi Annan.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;vps:ea9e3bd770b9144f6a284e7574cdf713&#34;&gt;VPS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vultr.com/?ref=6837862&#34;&gt;Vultr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/?refcode=56202ab61fb7&#34;&gt;DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bandwagonhost.com/aff.php?aff=2128&#34;&gt;BandwagonHOST&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Client Area -&amp;gt; Services -&amp;gt; Order New Services&lt;/li&gt;
&lt;li&gt;64MB RAM is enough for running both ShadowSocks and pdnsd&lt;/li&gt;
&lt;li&gt;Install Ubuntu LTS 32bit (x86, i686).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;docker:ea9e3bd770b9144f6a284e7574cdf713&#34;&gt;Docker&lt;/h2&gt;

&lt;p&gt;Install &lt;a href=&#34;https://docs.docker.com/installation/&#34;&gt;Docker&lt;/a&gt; on VPS.&lt;/p&gt;

&lt;h2 id=&#34;remote-proxy:ea9e3bd770b9144f6a284e7574cdf713&#34;&gt;Remote Proxy&lt;/h2&gt;

&lt;p&gt;Install &lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-go/releases&#34;&gt;shadowsocks&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p &amp;lt;port&amp;gt;:&amp;lt;port&amp;gt; h12w/shadowsocks -p &amp;lt;port&amp;gt; -k &amp;lt;password&amp;gt; -m aes-128-cfb -t 60
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remote-dns-server:ea9e3bd770b9144f6a284e7574cdf713&#34;&gt;Remote DNS server&lt;/h2&gt;

&lt;p&gt;Install &lt;a href=&#34;http://members.home.nl/p.a.rombouts/pdnsd/&#34;&gt;pdnsd&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p [port]:53 -p [port]:53/udp h12w/pdnsd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test the DNS server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dig @xxx.xxx.xxx.xxx -p xxxx www.linux.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;local-openwrt-router:ea9e3bd770b9144f6a284e7574cdf713&#34;&gt;Local OpenWrt Router&lt;/h2&gt;

&lt;p&gt;Install &lt;a href=&#34;https://github.com/shadowsocks/openwrt-shadowsocks&#34;&gt;openwrt-shadowsocks&lt;/a&gt;
on an &lt;a href=&#34;https://openwrt.org/&#34;&gt;OpenWrt&lt;/a&gt; router.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;opkg update
opkg install ipset libopenssl resolveip iptables-mod-tproxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check CPU version of the router:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /proc/cpuinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From &lt;a href=&#34;http://sourceforge.net/projects/openwrt-dist/&#34;&gt;OpenWrt-Dist&lt;/a&gt;, download
IPKs of the corresponding CPU:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/&#34;&gt;shadowsocks-libev-spec&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sourceforge.net/projects/openwrt-dist/files/luci-app/shadowsocks-spec/&#34;&gt;luci-shadowsocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sourceforge.net/projects/openwrt-dist/files/chinadns/&#34;&gt;chinadns&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sourceforge.net/projects/openwrt-dist/files/luci-app/chinadns/&#34;&gt;luci-chinadns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Copy &lt;code&gt;*.ipk&lt;/code&gt; to router:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp *.ipk root@192.168.1.1:/tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And install:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;opkg install shadowsocks-libev-spec_xxx.ipk
opkg install ChinaDNS_xxx.ipk
/etc/init.d/shadowsocks enable
/etc/init.d/chinadns enable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ShadowSocks configuration in &lt;code&gt;/etc/config/shadowsocks&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config shadowsocks
	...
	option config_file &#39;/etc/shadowsocks/config.json&#39;
	...
	option tunnel_enable &#39;0&#39;
	...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It refers to &lt;code&gt;/etc/shadowsocks/config.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;server&amp;quot;:      &amp;quot;xxx.xxx.xxx.xxx&amp;quot;,
    &amp;quot;server_port&amp;quot;: xxxx,
    &amp;quot;local_port&amp;quot;:  xxxx,
    &amp;quot;password&amp;quot;:    &amp;quot;xxxxxx&amp;quot;,
    &amp;quot;method&amp;quot;:      &amp;quot;aes-128-cfb&amp;quot;,
    &amp;quot;timeout&amp;quot;:     60
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ChinaDNS configuration in &lt;code&gt;/etc/config/chinadns&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config chinadns
    ...
    option chnroute &#39;/etc/shadowsocks/ignore.list&#39;
    ...
    option server &#39;[isp_dns],[private_pdnsd_dns]&#39;
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure &lt;code&gt;[private_pdnsd_dns]&lt;/code&gt; is the same IP:PORT as the remote pdnsd server.&lt;/p&gt;

&lt;p&gt;ucitrack configuration in &lt;code&gt;/etc/config/ucitrack&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config shadowsocks
    option init &#39;shadowsocks&#39;

config chinadns
    option init &#39;chinadns&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DHCP configuration in &lt;code&gt;/etc/config/dhcp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config dnsmasq
    list server &#39;127.0.0.1#5353&#39;
    option noresolv &#39;1&#39;
    option nohosts &#39;1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;redsocks2:ea9e3bd770b9144f6a284e7574cdf713&#34;&gt;RedSocks2&lt;/h2&gt;

&lt;p&gt;Use RedSocks2 to bypass the proxy when the target site is reachable.&lt;/p&gt;

&lt;p&gt;Download RedSocks2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sourceforge.net/projects/openwrt-dist/files/redsocks2/&#34;&gt;RedSocks2&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sourceforge.net/projects/openwrt-dist/files/luci-app/redsocks2/&#34;&gt;luci-redsocks2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install RedSocks2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp *.ipk root@192.168.1.1:/tmp
opkg update
opkg install xxx.ipk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RedSocks2 will take effect immediately.&lt;/p&gt;

&lt;h2 id=&#34;upgrade-openwrt:ea9e3bd770b9144f6a284e7574cdf713&#34;&gt;Upgrade OpenWRT&lt;/h2&gt;

&lt;p&gt;Download latest &lt;code&gt;*.ipk&lt;/code&gt; above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;opkg update
opkg upgrade ipset libopenssl resolveip iptables-mod-tproxy
opkg install xxx.ipk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Merge configuration files manually.&lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;ignore.list&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget -O- &#39;http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest&#39; | awk -F\| &#39;/CN\|ipv4/ { printf(&amp;quot;%s/%d\n&amp;quot;, $4, 32-log($5)/log(2)) }&#39; &amp;gt; ignore.list
scp ignore.list root@192.168.1.1:/etc/shadowsocks/ignore.list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;android-client:ea9e3bd770b9144f6a284e7574cdf713&#34;&gt;Android Client&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-android/releases&#34;&gt;shadowsocks-android&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Haskell the Hard Way</title>
      <link>http://h12.me/article/learn_haskell/</link>
      <pubDate>Sat, 26 Jul 2014 08:12:39 +0000</pubDate>
      
      <guid>http://h12.me/article/learn_haskell/</guid>
      <description>

&lt;p&gt;When I was reading the &lt;a href=&#34;http://www.haskell.org/haskellwiki/Learning_Haskell&#34;&gt;collection&lt;/a&gt; of learning resources on Haskell and tried to find a good start, I quickly realized that
none of the books or tutorials are suitable for me: the easier a tutorial claims
to be, the harder to really understand Haskell by reading it. What I need is a
terse documentation that introduces the syntax and semantics of Haskell
systematically and clearly, but unfortunately none was found.&lt;/p&gt;

&lt;p&gt;I know I have to try the hard way: reading the
&lt;a href=&#34;http://www.haskell.org/haskellwiki/Language_and_library_specification&#34;&gt;Haskell language specification&lt;/a&gt;
directly and absorb it myself. To make the process less dull and record my
progress, I will write down my learning notes here incrementally.&lt;/p&gt;

&lt;h2 id=&#34;overview:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;A Haskell program is organized with four levels: &lt;em&gt;modules&lt;/em&gt;, &lt;em&gt;declarations&lt;/em&gt;,
&lt;em&gt;expressions&lt;/em&gt; &amp;amp; &lt;em&gt;lexical structures&lt;/em&gt;, but the specification is organized in the
reverse order.&lt;/p&gt;

&lt;p&gt;Haskell has &lt;em&gt;ad hoc&lt;/em&gt; polymorphism (&lt;em&gt;overloading&lt;/em&gt;) and &lt;em&gt;parametric&lt;/em&gt; polymorphism
(Hindley-Milner type structure).&lt;/p&gt;

&lt;p&gt;Haskell has six namespaces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for value

&lt;ul&gt;
&lt;li&gt;variable&lt;/li&gt;
&lt;li&gt;constructor&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;for type entity

&lt;ul&gt;
&lt;li&gt;type variable&lt;/li&gt;
&lt;li&gt;type constructor&lt;/li&gt;
&lt;li&gt;type class&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same name can be reused without conflicts as long as they are in different
namespaces.&lt;/p&gt;

&lt;h2 id=&#34;lexical-structure:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Lexical Structure&lt;/h2&gt;

&lt;p&gt;A Haskell program is composed of lexemes (tokens) and whitespaces.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;program → { lexeme | whitespace } 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whitespace includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The complete set of whitespace in both ASCII &amp;amp; Unicode&lt;/li&gt;
&lt;li&gt;Two kinds of comments

&lt;ul&gt;
&lt;li&gt;inline comment starts with &lt;code&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;nested comment wrapped by &lt;code&gt;{- -}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A lexeme is one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;identifier

&lt;ul&gt;
&lt;li&gt;qvarid: (qualified) variable identifier&lt;/li&gt;
&lt;li&gt;qconid: (qualified) constructor identifier&lt;/li&gt;
&lt;li&gt;reservedid: reserved identifier&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;operator

&lt;ul&gt;
&lt;li&gt;qvarsym: (qualified) variable (symbolic) operator&lt;/li&gt;
&lt;li&gt;qconsym: (qualified) constructor (symbolic) operator&lt;/li&gt;
&lt;li&gt;reservedop: reserved operator&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;literal: integer, float, character or string literal&lt;/li&gt;
&lt;li&gt;special: one of special symbols &lt;code&gt;()[]{}`,;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A variable and a constructor is distinguished by the first character and put into
different namespaces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;identifier

&lt;ul&gt;
&lt;li&gt;variable: lower case (including underscore)&lt;/li&gt;
&lt;li&gt;constructor: upper case&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;operator

&lt;ul&gt;
&lt;li&gt;variable: non-colon&lt;/li&gt;
&lt;li&gt;constructor: colon &lt;code&gt;:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A variable or constructor can contain symbol &lt;code&gt;&#39;&lt;/code&gt;, so the common mathematical
term &amp;ldquo;x prime&amp;rdquo; can be represented as &lt;code&gt;x&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By using layout rule (indentation), symbols &lt;code&gt;{};&lt;/code&gt; can be omitted in sereral
grammer productions.&lt;/p&gt;

&lt;h2 id=&#34;expressions:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Expressions&lt;/h2&gt;

&lt;h3 id=&#34;parentheses:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Parentheses&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;(exp)&lt;/code&gt; is a &lt;em&gt;parenthesized expression&lt;/em&gt;, and is equivalent to &lt;code&gt;exp&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;function-operator-application:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Function &amp;amp; operator application&lt;/h3&gt;

&lt;p&gt;Function is prefixed and curried, so &lt;code&gt;f x y&lt;/code&gt; means &lt;code&gt;(f x) y&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fexp    → [fexp] aexp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All operators are infixed except prefix negation &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;infixexp→ lexp qop infixexp
        | - infixexp    (prefix negation)
        | lexp
qop     → qvarop | qconop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An operator can be converted to prefix notation by parentheses. e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(+) x y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reversely, a function identifier (either variable or constructor) can be
converted to an infix operator by backquotes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x `op` y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-tuple:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;List &amp;amp; Tuple&lt;/h3&gt;

&lt;p&gt;List is constructed with &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1:2:3:[]   or   (:) 1 ((:) 2 ((:) 3 []))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Arithmetic sequence&lt;/em&gt; is another way to construct a list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1,3..6] == [1,3,5]
  [1..6] == [1,2,3,4,5,6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tuple is constructed with &lt;code&gt;(,...,)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1, 2, &amp;quot;a&amp;quot;)   or   (,,) 1 2 &amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;field-label:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Field label&lt;/h3&gt;

&lt;p&gt;A field label is used to give a name to a field in a datatype. It can be used to
construct, extract and update the field.&lt;/p&gt;

&lt;p&gt;A constructor with labeled fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aexp    → qcon { fbind1 , … , fbindn }  (n ≥ 0)
fbind   → qvar = exp 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pattern-matching:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Pattern matching&lt;/h3&gt;

&lt;p&gt;A pattern itself is not an expression, but it is an important part of sereral
expressions, including: &lt;em&gt;lambda abstractions&lt;/em&gt;, &lt;em&gt;function definitions&lt;/em&gt;,
&lt;em&gt;let expressions&lt;/em&gt;, &lt;em&gt;list comprehensions&lt;/em&gt;, &lt;em&gt;do expressions&lt;/em&gt; and &lt;em&gt;case expressions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pattern matching is used to deconstruct values according to their type
specification. It proceeds from left to right, and outside to inside. Attempting
to match a pattern can have one of three results:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fail&lt;/li&gt;
&lt;li&gt;Succeed: returning a binding for each variable in the pattern&lt;/li&gt;
&lt;li&gt;Diverge: i.e. return ⊥&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The syntax for patterns covers a subset of expressions.&lt;/p&gt;

&lt;p&gt;A pattern can match against infix expressions, but limited to infix constructors
(the operator must be &lt;code&gt;qconop&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pat     → lpat qconop pat (infix constructor)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A pattern can match against constructor functions (with or without field labels).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pat     → ...
        | lpat

lpat    → apat
        | gcon apat1 … apatk    (arity gcon  =  k, k ≥ 1) 

apat    → ...
        | gcon  (arity gcon  =  0)
        | qcon { fpat1 , … , fpatk }    (labeled pattern, k ≥ 0)

fpat    → qvar = pat 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A pattern can match against a variable, a literal, a parenthesized expression,
a tuple or a list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lpat    → var ...
        | - (integer | float)   (negative literal) 

apat    → ...
        | literal
        | ( pat )               (parenthesized pattern)
        | ( pat1 , … , patk )   (tuple pattern, k ≥ 2)
        | [ pat1 , … , patk ]   (list pattern, k ≥ 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The variables defined within the pattern can be binded, but how to name and bind
the whole pattern? This is exactly what an &lt;em&gt;as pattern&lt;/em&gt; does (&lt;code&gt;var&lt;/code&gt; before &lt;code&gt;@&lt;/code&gt;
is the name for the whole pattern).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apat    → var [ @ apat] (as pattern) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wildcard is used when you need a variable placeholder but do not want to bind
the value to a name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apat    → ...
        | _     (wildcard)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes you need a pattern that can never fail (only succeed or diverge), it
is called a irrefutable pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apat    → ...
        | ~ apat        (irrefutable pattern)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides &lt;code&gt;~apat&lt;/code&gt;, these patterns are also irrefutable: a variable, a wildcard,
&lt;code&gt;N apat&lt;/code&gt; where N is a constructor defined by newtype and apat is irrefutable,
&lt;code&gt;var@apat&lt;/code&gt; where apat is irrefutable. All other patterns are refutable.&lt;/p&gt;

&lt;h3 id=&#34;case-expression:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Case expression&lt;/h3&gt;

&lt;p&gt;Case expression is very important because all other pattern matching expressions
ultimately translate into case expressions.&lt;/p&gt;

&lt;p&gt;A case expression has one or more alternatives.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lexp    → case exp of { alts }
alts    → alt1 ; … ; altn       (n ≥ 1) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative is either a pattern or empty. The pattern either coresponds to
an expression (body) directly, or has one or more guarded patterns (note an
optional gdpat appears at the right side of itself). A guarded pattern starts
with &lt;code&gt;|&lt;/code&gt; and is composed of one or more guards.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alt     → pat -&amp;gt; exp [where decls]
        | pat  gdpat [where decls]
        | (empty alternative) 
gdpat   → guards -&amp;gt; exp [ gdpat ]
guards  → | guard1, …, guardn   (n ≥ 1)
decls   → { decl1 ; … ; decln } (n ≥ 0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that each alternative can optionally have a &lt;code&gt;where&lt;/code&gt; declaration. It is used
to bind extra variables to be used in the local scope.&lt;/p&gt;

&lt;p&gt;There are two types of guards: &lt;em&gt;pattern guard&lt;/em&gt; &amp;amp; &lt;em&gt;boolean guard&lt;/em&gt;, and local
declarations can also be introduced together with guards.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;guard   → pat &amp;lt;- infixexp     (pattern guard)
        | let decls           (local declaration)
        | infixexp            (boolean guard)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how a case expression works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The expression after &lt;code&gt;case&lt;/code&gt; is matched against each alternative till a match
is found.&lt;/li&gt;
&lt;li&gt;Then each guarded pattern in the matched alterantive is tested till one
passes. A guarded pattern passes if and only if all of its guards pass.&lt;/li&gt;
&lt;li&gt;If successful, the conresponding expression is returned, otherwise, the next
guarded pattern or alternative is tried sequentially.&lt;/li&gt;
&lt;li&gt;If no match can be found, the result is ⊥.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;lambda-expression:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Lambda expression&lt;/h3&gt;

&lt;p&gt;Lambda is used to construct a function without a name. Besides a variable, the
input can also be any pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lexp    → \ apat1 … apatn -&amp;gt; exp        (n ≥ 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(\ (x, y) -&amp;gt; x+y) (3, 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also note that lambda &lt;code&gt;-&amp;gt;&lt;/code&gt; associates to the right, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Integer -&amp;gt;  Integer -&amp;gt; Integer
    is equivalent to
Integer -&amp;gt; (Integer -&amp;gt; Integer)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;let-expression:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Let expression&lt;/h3&gt;

&lt;p&gt;A let expression introduces a nested, lexically-scoped, mutually-recursive list
of declarations. &lt;code&gt;exp&lt;/code&gt; after keyword &lt;code&gt;in&lt;/code&gt; is the value of a let expression.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lexp    → let decls in exp
decls   → { decl1 ; … ; decln } (n ≥ 0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let {} in 42
let {(x,y) = (1,2)} in x+y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;list-comprehension:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;List comprehension&lt;/h3&gt;

&lt;p&gt;A list comprehension constructs a list of elements represented by &lt;code&gt;exp&lt;/code&gt; qualified
by one or more qualifiers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aexp    → [ exp | qual1 , … , qualn ]   (n ≥ 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are three kinds of qualifiers.&lt;/p&gt;

&lt;p&gt;A generator is composed of a pattern (&lt;code&gt;pat&lt;/code&gt; with type &lt;code&gt;t&lt;/code&gt;) and a list (&lt;code&gt;e&lt;/code&gt; with
type &lt;code&gt;[t]&lt;/code&gt;). The pattern is matched against and binded to each element of the
list one by one, so the binded variables can be used to generate each element of
the result list. The generators are evaluated in a nested, depth-first order,
and a failed match is just skipped over.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;qual    → pat &amp;lt;- e      (generator)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A qualifier can also be a local declaration to bind auxiliary variables, or a
boolean guard to exclude some elements from the list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;qual    → ...
        | let decls     (local declaration)
        | exp           (boolean guard) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;do-expression:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Do expression&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Wait till monad is fully understood.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;type-signature:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Type signature&lt;/h3&gt;

&lt;p&gt;Haskell has type inference, but an expression can be optionally specified with a
&lt;em&gt;type signature&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exp     → infixexp :: [context =&amp;gt;] type
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;declarations:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Declarations&lt;/h2&gt;

&lt;p&gt;There are top declarations (&lt;code&gt;topdecl&lt;/code&gt;) that are only allowed at the top level of
a module, and nested declarations (&lt;code&gt;decl&lt;/code&gt;) that may be used either at the top
level or in nested scopes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;topdecl → ...
        | ...
        | decl 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;top-declarations:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Top declarations&lt;/h3&gt;

&lt;p&gt;A top declaration starts with one of the keywords: &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;newtype&lt;/code&gt;,
&lt;code&gt;class&lt;/code&gt;, &lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;foreign&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;data&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;newtype&lt;/code&gt; is for declaring new types. &lt;code&gt;class&lt;/code&gt; is for
declaring typeclasses and &lt;code&gt;instance&lt;/code&gt; is for declaring the membership between
types and typeclasses.&lt;/p&gt;

&lt;p&gt;They are explained later one by one.&lt;/p&gt;

&lt;h3 id=&#34;nested-declarations:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Nested declarations&lt;/h3&gt;

&lt;p&gt;In the last section, &lt;code&gt;decl&lt;/code&gt; appears in the let expression and where clause
without any explanations. Actually, they are nested declarations.&lt;/p&gt;

&lt;p&gt;There are five kinds of nested declarations: &lt;em&gt;type signature&lt;/em&gt;, &lt;em&gt;fixity&lt;/em&gt;,
&lt;em&gt;function binding&lt;/em&gt;, &lt;em&gt;pattern binding&lt;/em&gt; and &lt;em&gt;empty&lt;/em&gt; declartions.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;type signature&lt;/em&gt; simply specifies types for variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;decl    → gendecl
        | ...
gendecl → vars :: [context =&amp;gt;] type
vars    → var1 , …, varn        (n ≥ 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;em&gt;fixity&lt;/em&gt; declaration gives the fixity and binding precedence of one or more
operators.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gendecl → ...
        | fixity [integer] ops
fixity  → infixl | infixr | infix
ops     → op1 , … , opn         (n ≥ 1)
op      → varop | conop 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The right hand side (&lt;code&gt;rhs&lt;/code&gt;) of function and pattern bindings are the same.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;decl    → ...
        | (funlhs | pat) rhs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax of &lt;code&gt;rhs&lt;/code&gt; is almost the same as &lt;em&gt;case expression&lt;/em&gt;, except &lt;code&gt;-&amp;gt;&lt;/code&gt; is
replaced by &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rhs     → = exp [where decls]
        | gdrhs [where decls]
gdrhs   → guards = exp [gdrhs]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A function can be binded in multiple function binding declarations, as long as
they are contiguous and the number of patterns is the same. In each of the
declaration, the left hand side supports three alternative syntaxes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;funlhs  → var apat { apat }
        | pat varop pat
        | ( funlhs ) apat { apat }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plus x y z = x+y+z
x ‘plus‘ y = \ z -&amp;gt; x+y+z
(x ‘plus‘ y) z = x+y+z
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;type:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Type&lt;/h3&gt;

&lt;p&gt;Just as an &lt;em&gt;expression&lt;/em&gt; may contain variables and denotes a value, a
&lt;em&gt;type expression&lt;/em&gt; may contain &lt;em&gt;type variables&lt;/em&gt; and denotes a type value (but it
is evaluated at compile time, unlike an expression evaluated at run time).&lt;/p&gt;

&lt;p&gt;Type expressions are designed to have similar representations as their
corresponding expressions.&lt;/p&gt;

&lt;p&gt;Function type can be represented in infix or prefix notation.
Like function application, &lt;em&gt;type application&lt;/em&gt; (&lt;code&gt;btype&lt;/code&gt;) is also prefixed and
curried. &lt;code&gt;atype&lt;/code&gt; is the type expression excluding infix function type and
type application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type    → btype [-&amp;gt; type]       (function type)
btype   → [btype] atype         (type application)
atype   → gtycon
        | ...
gtycon  → ...
        | (-&amp;gt;)  (function constructor)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;em&gt;type variable&lt;/em&gt; is an identifier beginning with a lowercase letter.
A &lt;em&gt;parenthesized type&lt;/em&gt; &lt;code&gt;(t)&lt;/code&gt; is identical to the type &lt;code&gt;t&lt;/code&gt;.
A &lt;em&gt;type constructor&lt;/em&gt; (type template) as an identifier begins with an uppercase
letter.
Besides function type, the syntaxes for tuple and list are also special syntaxes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;atype   → gtycon
        | tyvar
        | ( type1 , … , typek ) (tuple type, k ≥ 2)
        | [ type ]              (list type)
        | ( type )              (parenthesised constructor)
gtycon  → qtycon
        | ()            (unit type)
        | []            (list constructor)
        | (-&amp;gt;)          (function constructor)
        | (,{,})        (tupling constructors) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;kind:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Kind&lt;/h3&gt;

&lt;p&gt;What is &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;* -&amp;gt; *&lt;/code&gt;&amp;hellip;? An ordinary type has kind &lt;code&gt;*&lt;/code&gt;. A type constructor
(template) that has one type argument has kind &lt;code&gt;* -&amp;gt; *&lt;/code&gt;, e.g. a list. So on and
so forth.&lt;/p&gt;

&lt;h3 id=&#34;context:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Context&lt;/h3&gt;

&lt;p&gt;The context (&lt;code&gt;context =&amp;gt; type&lt;/code&gt;) is used to indicate that type &lt;code&gt;tyvar&lt;/code&gt; belongs to
class &lt;code&gt;qtycls&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A context is composed of zero or more class assertions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context → class
        | ( class1 , … , classn )               (n ≥ 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a class assertion is either either a type variable, or the application of
type variable to one or more types.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class   → qtycls tyvar
        | qtycls ( tyvar atype1 … atypen )      (n ≥ 1)
qtycls  → [ modid . ] tycls
tycls   → conid
tyvar   → varid 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;algebraic-data-type:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Algebraic data type&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;algebraic data type&lt;/em&gt; is named so because it is composed of other types by
product and sum (algebraic operations). It introduces a new type constructor
(&lt;code&gt;simpletype&lt;/code&gt;) with zero or more constituent data constructors (&lt;code&gt;constrs&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;topdecl → ...
        | data [context =&amp;gt;] simpletype [= constrs] [deriving]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The type constructor begins with upper case letter and may have zero to more
type variables as parameters. The type constructor then can be used in curried
type application in a type expression.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;simpletype      → tycon tyvar1 … tyvark         (k ≥ 0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the right side of &lt;code&gt;=&lt;/code&gt;, sum (alternative) types are separated by &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;constrs → constr1 | … | constrn         (n ≥ 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each &lt;code&gt;constr&lt;/code&gt;, there are three alternative syntaxes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A data constructor followed by zero or more &lt;code&gt;atype&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An infix data constructor operator between two &lt;code&gt;btype&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A data constructor followed by field declarations.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;constr  → con [!] atype1 … [!] atypek   (arity con  =  k, k ≥ 0)
        | (btype | ! atype) conop (btype | ! atype) (infix conop)
        | con { fielddecl1 , … , fielddecln }       (n ≥ 0) 
con     → conid | ( consym )    (constructor) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;!&lt;/code&gt; is strictness flag to indicate that the corresponding constructor argument
is eagerly evaluated.&lt;/p&gt;

&lt;h3 id=&#34;type-synonym:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Type synonym&lt;/h3&gt;

&lt;p&gt;A type synonym is equivalent to its definition are completely interchangeable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;topdecl → type simpletype = type
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;newtype:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Newtype&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;newtype&lt;/em&gt; declaration introduces a distinct type whose representation is the
same as an existing type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;topdecl     → newtype [context =&amp;gt;] simpletype = newconstr [deriving]
newconstr   → con atype
            | con { var :: type }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Unlike type synonyms, &lt;code&gt;newtype&lt;/code&gt; may be used to define recursive types.&lt;/li&gt;
&lt;li&gt;New instances can be defined for a type defined by &lt;code&gt;newtype&lt;/code&gt; but may not be
defined for a type synonym.&lt;/li&gt;
&lt;li&gt;A type created by &lt;code&gt;newtype&lt;/code&gt; has an extra level of indirection compared to an
algebraic datatype, so the pattern matching rule is different.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ad-hoc-polymorphism:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Ad hoc polymorphism&lt;/h3&gt;

&lt;p&gt;Ad hoc polymorphism (overloading) is supported by &lt;em&gt;typeclasses&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A class declaration introduces a new class and the operations (methods) on it.&lt;/p&gt;

&lt;h2 id=&#34;modules:b9b074007e556aa28f8a3e7bb14cecf5&#34;&gt;Modules&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;To be continued&amp;hellip;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Achieve a Perfect PageSpeed Insights Score</title>
      <link>http://h12.me/article/pagespeed_insights/</link>
      <pubDate>Thu, 24 Jul 2014 03:42:01 +0000</pubDate>
      
      <guid>http://h12.me/article/pagespeed_insights/</guid>
      <description>

&lt;h2 id=&#34;indtroduction:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Indtroduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights/&#34;&gt;PageSpeed Insights&lt;/a&gt; is
an online tool by Google to measure the performance of an web page for mobile
and desktop devices. It has a set of heuristic rules considering the
network-independent aspects of page performance. Each rule has a weight and the
total score ranges from 0 to 100 points. The desktop and mobile tests have the
same set of rules for performance and mobile test has some extra rules
about user experience.&lt;/p&gt;

&lt;p&gt;Though it might be too rigorous to require &lt;sup&gt;100&lt;/sup&gt;&amp;frasl;&lt;sub&gt;100&lt;/sub&gt; score for a web site, it is a
good way to learn those rules to actually achieve it, and it does have a
significant improvement to the load time of my site (load time reduces from more
than 1 sec to about 500 ms in the &lt;a href=&#34;http://fpt.pingdom.com/&#34;&gt;Pingdom Website Speed Test&lt;/a&gt;).
In the following section, I would like to share what I have learned by
optimizing this website to achieve a &lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights/?url=http%3A%2F%2Fh12.me&#34;&gt;perfect score&lt;/a&gt;, rule by rule.&lt;/p&gt;

&lt;h2 id=&#34;speed-rules:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Speed rules&lt;/h2&gt;

&lt;h3 id=&#34;avoid-landing-page-redirects:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Avoid landing page redirects&lt;/h3&gt;

&lt;p&gt;The redirection to mobile version can be avoided by responsive design (CSS media
queries).&lt;/p&gt;

&lt;p&gt;You cannot avoid redirections completely, e.g. I have a 301 redirection from www
subdomain to the naked domain, but the naked domain does not have any further
redirection.&lt;/p&gt;

&lt;h3 id=&#34;eliminate-render-blocking-javascript-and-css-in-above-the-fold-content:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Eliminate render-blocking JavaScript and CSS in above-the-fold content&lt;/h3&gt;

&lt;p&gt;This might be the hardest rule to fully comply with.&lt;/p&gt;

&lt;p&gt;Firstly, you need to minimize and fully inline your CSS into HTML, and your CSS
cannot be too large. (My CSS is 22kB after minimization). If you use web fonts,
you should directly write the @font-face in your inlined CSS, rather than
importing an external CSS.&lt;/p&gt;

&lt;p&gt;Secondly, you need to inline or asynchronously load all your scripts. The
&amp;ldquo;async&amp;rdquo; attribute is not very useful because it cannot control the order of
the execution of multiple scripts. I have found &lt;a href=&#34;http://headjs.com/&#34;&gt;HeadJS&lt;/a&gt;
to solve the problem. HeadJS is inlined into the HTML (3.7kB), and other scripts
are loaded asychronously but executed in order.&lt;/p&gt;

&lt;p&gt;Finally, you have to make sure the delayed scripts will not affect the
layout of above-the-fold content. You might have to make some trade off and cut
off some functionality.&lt;/p&gt;

&lt;h3 id=&#34;enable-compression-leverage-browser-caching-reduce-server-response-time:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Enable compression, Leverage browser caching &amp;amp; Reduce server response time&lt;/h3&gt;

&lt;p&gt;Since I uses Google App Engine, the gzip compression should already been enabled
by default, the expiration time for static resources are configurable via
config.yaml and GAE responses fast enough.&lt;/p&gt;

&lt;h3 id=&#34;minify-resources-html-css-and-javascript:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Minify Resources (HTML, CSS, and JavaScript)&lt;/h3&gt;

&lt;p&gt;The CSS is minified by Compass, and scripts imported are already minified. The
HTML file is not minified but it seems not serious enough to trigger a test
warning by PageSpeed.&lt;/p&gt;

&lt;h3 id=&#34;optimize-images:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Optimize images&lt;/h3&gt;

&lt;p&gt;I use font icons in my site. When there has to be an image, use PNG compressed with
&lt;a href=&#34;http://optipng.sourceforge.net/&#34;&gt;OptiPNG&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;reduce-the-size-of-the-above-the-fold-content:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Reduce the size of the above-the-fold content&lt;/h3&gt;

&lt;p&gt;It basically depends on your design and just remember the YAGNI principle.&lt;/p&gt;

&lt;h2 id=&#34;user-experience-rules:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;User experience rules&lt;/h2&gt;

&lt;p&gt;These rule only applies to mobile platforms.&lt;/p&gt;

&lt;h3 id=&#34;avoid-plugins:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Avoid plugins&lt;/h3&gt;

&lt;p&gt;None of them on my site.&lt;/p&gt;

&lt;h3 id=&#34;configure-the-viewport:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Configure the viewport&lt;/h3&gt;

&lt;p&gt;This is part of the responsive design.&lt;/p&gt;

&lt;h3 id=&#34;size-content-to-viewport:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Size content to viewport&lt;/h3&gt;

&lt;p&gt;An important lesson: never write a URL directly in an article because URL does
not wrap well and could overflow out of the viewport width. instead, give the
URL a name composed of words.&lt;/p&gt;

&lt;h3 id=&#34;size-tap-targets-appropriately-use-legible-font-sizes:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Size tap targets appropriately &amp;amp; Use legible font sizes&lt;/h3&gt;

&lt;p&gt;I have written some lists of links in my notes, which makes those links close to
each other. To make them separate enough to pass this rule, the line height cannot
be too small, here is the minimal requirement from my tests (font-size/line-height):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;16px/28px&lt;/li&gt;
&lt;li&gt;17px/28px&lt;/li&gt;
&lt;li&gt;18px/29px&lt;/li&gt;
&lt;li&gt;19px/30px&lt;/li&gt;
&lt;li&gt;20px/30px&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion:919a68b12dcbd06a0bdd7b43f8ef2907&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It is not rocket science to build a website with good performance. You just needs
to tune and optimize every detail of your site patiently. In this process,
PageSpeed Insights can help a lot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding Optimal Typographic Scale</title>
      <link>http://h12.me/article/optimal_font_scale/</link>
      <pubDate>Sat, 05 Jul 2014 15:03:04 +0000</pubDate>
      
      <guid>http://h12.me/article/optimal_font_scale/</guid>
      <description>

&lt;p&gt;During the construction of this site, there are many important design decisions
that need to be made. One of them is to decide the font size for each level of
headings, i.e., typographic scale.&lt;/p&gt;

&lt;h2 id=&#34;investigation:f857546c9f6549514c78eb24fd887797&#34;&gt;Investigation&lt;/h2&gt;

&lt;p&gt;The first thing I did was to read &lt;a href=&#34;https://www.google.com/?#newwindow=1&amp;amp;q=typographic+scale&#34;&gt;everything online&lt;/a&gt;
about typographic scale. I will just skip the details and jump to my opinions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modular scale should be followed&lt;/li&gt;
&lt;li&gt;Traditional scale is obsolete&lt;/li&gt;
&lt;li&gt;Golden ratio or double-stranded scale do not make any sense&lt;/li&gt;
&lt;li&gt;Vertical rhythm should be considered&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then a little explanation.&lt;/p&gt;

&lt;p&gt;Modular scale (geometric series) is the way how our visual perception understands
relative size. When a page is zoomed in or out, the perceived aboslue length
changes, but the ratio remains the same. Rather than choosing modular scale, we
actually think in terms of modular scale.  There is no hard rule that the ratio
of modular scale must be a constant, but a constant modular ratio is the simplest
and provides consistency.&lt;/p&gt;

&lt;p&gt;Traditional scale is actually modular scale of ratio 2 for size 6 7 8 9, with some
extra and missing sizes. There is no reason why we restraint ourselves to
irrelevant factors, instead, we should consider the constraints from our
&lt;em&gt;real problem&lt;/em&gt;. The same reason applies to the golden ratio and double-stranded
scale.&lt;/p&gt;

&lt;h2 id=&#34;problem-constraints:f857546c9f6549514c78eb24fd887797&#34;&gt;Problem &amp;amp; constraints&lt;/h2&gt;

&lt;p&gt;What is a good typographic scale? For a Blog article, it should at least meet the
following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discrimination: different headings can be easily distingushed&lt;/li&gt;
&lt;li&gt;Consistency: all the headings looks consistent by the same principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides font size, line height of each level of headings should also be adjusted
to meet the requirement of vertical rhythm. Line height affects the appearance
of a heading, especially when the heading is wrapped and takes up multiple lines.&lt;/p&gt;

&lt;p&gt;Modular scale solves part of the problem, but we still have to determine the
value of the modular ratio and to make the line height as consistent as possible
while maintaining vertical rhythm.&lt;/p&gt;

&lt;p&gt;The typographic scale should also satisfy these constraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The line height of each heading must be an integral multiple of the line height
of body copy (vertical rhythm)&lt;/li&gt;
&lt;li&gt;The smallest heading must not smaller than the body copy&lt;/li&gt;
&lt;li&gt;The number of heading levels&lt;/li&gt;
&lt;li&gt;The maximum acceptable size of the top heading&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;optimization:f857546c9f6549514c78eb24fd887797&#34;&gt;Optimization&lt;/h2&gt;

&lt;p&gt;Design is a process exploring all the possible solutions (the design space) to
find an optimal one, i.e. an &lt;a href=&#34;http://en.wikipedia.org/wiki/Optimization_problem&#34;&gt;optimization problem&lt;/a&gt;.
If we can express the problem in a mathematical form, we can solve it by
computation.&lt;/p&gt;

&lt;p&gt;The constraints are already listed. The next thing is to express the objective
function, which is the inconsistency of headings from each other. What is it?&lt;/p&gt;

&lt;p&gt;Short answer: the standard deviation of relative line height.&lt;/p&gt;

&lt;p&gt;Long answer: The line height of each heading is different, but the relative line
height (line height divided by font size) of different headings can be the same,
and when they are the same, the headings look consistent. To compare two numbers,
you can just use the absolute value of the difference of the two numbers, but for
a list of numbers, standard deviation is an effective measure for their inconsistency.&lt;/p&gt;

&lt;p&gt;The caculation is easy for a computer, and can be done with brute force. The
program just needs to exhaustively tries each possible heading sizes that
satisifies all the constraints and evaluates the inconsistency. Finally, it
sorts all the solutions by the inconsistency and find the best solution.&lt;/p&gt;

&lt;p&gt;Here is the code (runable online):
&lt;a href=&#34;http://play.golang.org/p/rP09HJDUcz&#34;&gt;a Go program to calculate optimal typographic scale&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;example:f857546c9f6549514c78eb24fd887797&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;In this site, I need to use maximum three levels of headings: H1, H2 &amp;amp; H3. I
choose 19px/30px as body copy. The search range for H3 is from 1.2*19px to
1.5*19px, and the range for H3 is from 35 to 50.
Finally the solution is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ratio: 1.3079
H3: 23px/1.3
H2: 30px/1.0
H1: 39px/1.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Though the line height of H2 is still not ideal, it is already the best solution
given the restrictions by vertical rhythm.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:f857546c9f6549514c78eb24fd887797&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The approach can sccessfully find the optimal typographic scale under the
precise problem definition in this article. It does not rely on any mysterious
process or magic numbers, but only reasoning and computation.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>